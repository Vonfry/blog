(setq org-publish-cache (make-hash-table :test 'equal :weakness nil :size 100))
(puthash ":project:" "slides" org-publish-cache)
(puthash ":cache-file:" "/home/ubuntu/blog/public/.org-timestamps/slides.cache" org-publish-cache)
(puthash "/home/ubuntu/blog/slides/functional-ruby.org" '(:references (((headline "多谢") . "orgheadline45") ((headline "多线程" "made" "easy") . "orgheadline44") ((headline "Free" "Monad") . "orgheadline43") ((headline "还可不可以在纯一些") . "orgheadline42") ((headline) . "orgheadline41") ((headline "IO自挂东南枝") . "orgheadline40") ((headline "控制流不关心失败和监控") . "orgheadline39") ((headline "上图有几次" "IO") . "orgheadline38") ((headline "一个更实际的" "🌰") . "orgheadline37") ((headline "Either" "魔法") . "orgheadline36") ((headline) . "orgheadline35") ((headline "怎么做到的") . "orgheadline34") ((headline "来简化控制流") . "orgheadline33") ((headline "让我们用一个简单的" "[[https://github.com/jcouyang/cats.rb#dataeither][Either" "Monad]]") . "orgheadline32") ((headline "或者用更极端的抛异常方式") . "orgheadline31") ((headline "监控") . "orgheadline30") ((headline "命令式放大象") . "orgheadline29") ((headline "一个简单" "🌰") . "orgheadline28") ((headline "Category" "Theory") . "orgheadline27") ((headline) . "orgheadline26") ((headline "但其实只是个简单的语法糖") . "orgheadline25") ((headline "/正则/") . "orgheadline24") ((headline "lambda" "（aka" "guard）") . "orgheadline23") ((headline "类型") . "orgheadline22") ((headline "值") . "orgheadline21") ((headline "case" "when") . "orgheadline20") ((headline "destructure" "-" "哈希") . "orgheadline19") ((headline "destructure" "-" "数组") . "orgheadline18") ((headline "模式匹配" "pattern" "matching") . "orgheadline17") ((headline "来" "🍬" "Desugar" "=&=") . "orgheadline16") ((headline "Symbol" "魔法") . "orgheadline15") ((headline "升舱的魔法" "=#to_proc=") . "orgheadline14") ((headline "给三等座升个舱") . "orgheadline13") ((headline "一等公民" "Proc") . "orgheadline12") ((headline "一等" "vs" "三等") . "orgheadline11") ((headline "二等公民" "Method") . "orgheadline10") ((headline "万物皆对象," "lambda" "也不例外") . "orgheadline9") ((headline "lambda") . "orgheadline8") ((headline "你可能不知道的Ruby") . "orgheadline7") ((headline "好处呢?") . "orgheadline6") ((headline "什么是函数式") . "orgheadline5") ((headline "Ruby" "函数式" "?") . "orgheadline4") ((headline "FBI" "Warning") . "orgheadline3") ((headline "[[https://git.io/fprb][git.io/fprb]]") . "orgheadline2") ((headline "Agenda") . "orgheadline1")) :index nil) org-publish-cache)
(puthash "X91d91569ccf06598330c004ec81365bac58307e7" 1474109661 org-publish-cache)
(puthash "/home/ubuntu/blog/slides/pratical Monads.org" '(:references (((headline "One" "more" "thing") . "orgheadline44") ((headline "Fin") . "orgheadline43") ((headline "[[http://jsbin.com/qazuju/edit?js,output][Demo]]") . "orgheadline42") ((headline) . "orgheadline41") ((headline "fromEvent") . "orgheadline40") ((headline "flatMap") . "orgheadline39") ((headline "fold") . "orgheadline38") ((headline) . "orgheadline37") ((headline "[[http://reactivex.io][ReactiveX]]") . "orgheadline36") ((headline "FRP(Functional" "Reactive" "Programming)") . "orgheadline35") ((headline "Space" "->" "Time") . "orgheadline34") ((headline) . "orgheadline33") ((headline "Space") . "orgheadline32") ((headline "Observable") . "orgheadline31") ((headline) . "orgheadline30") ((headline) . "orgheadline29") ((headline "flatMap") . "orgheadline28") ((headline "callback" "hell") . "orgheadline27") ((headline "fold") . "orgheadline26") ((headline "try") . "orgheadline25") ((headline "lift") . "orgheadline24") ((headline "*Promise*") . "orgheadline23") ((headline) . "orgheadline22") ((headline) . "orgheadline21") ((headline "n" "->" "pure") . "orgheadline20") ((headline "pure") . "orgheadline19") ((headline "u" "->" "concat") . "orgheadline18") ((headline "concat") . "orgheadline17") ((headline "Concatable" "in" "Type") . "orgheadline16") ((headline "Substitution") . "orgheadline15") ((headline) . "orgheadline14") ((headline) . "orgheadline13") ((headline "a" "String" "Monoid") . "orgheadline12") ((headline "a" "Array" "Functor") . "orgheadline11") ((headline "Some" "instances" "of" "Functor," "Monoid") . "orgheadline10") ((headline "Functional" "102") . "orgheadline9") ((headline "Before" "Monad") . "orgheadline8") ((headline "Functional" "101") . "orgheadline7") ((headline "Haskell" "101") . "orgheadline6") ((headline "ES6" "101") . "orgheadline5") ((headline) . "orgheadline4") ((headline "[[http://stackoverflow.com/questions/3870088/a-monad-is-just-a-monoid-in-the-category-of-endofunctors-whats-the-issue/3870310#3870310][A" "monad" "is" "just" "a" "monoid" "in" "the" "category" "of" "endofunctors," "what's" "the" "problem?]]") . "orgheadline3") ((headline "Monad") . "orgheadline2") ((headline "ToC") . "orgheadline1")) :index nil) org-publish-cache)
(puthash "X3914609ccd211f8b6848fc1b16bcbfe1a08ad8a3" 1474109661 org-publish-cache)
