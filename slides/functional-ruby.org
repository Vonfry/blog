#+TITLE: 函数式 Ruby 编程
#+SUBTITLE: [[https://github.com/jcouyang][https://www.evernote.com/l/ABdT021c-5RLDp9FvGm084F6Diu-N3h-Cz8B/image.jpg]]
#+AUTHOR: [[https://oyanglul.us][欧阳继超]]
#+EMAIL: oyanglulu@gmail.com
#+PROPERTY: header-args :results pp :exports both
#+OPTIONS: num:3
#+startup: beamer
#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [presentation,smaller]
#+BEAMER_THEME: Madrid
#+LATEX_HEADER: \usepackage[unicode,dvipdfm]{hyperref}
#+LATEX_HEADER: \usepackage{graphicx}
#+LATEX_HEADER: \usepackage{fontspec}
#+LATEX_HEADER: \usepackage{xeCJK}
#+LATEX_HEADER: \setCJKmainfont{STXihei}
#+LATEX_HEADER: \usepackage{listings}
#+OPTIONS: num:nil
* COMMENT
#+BEGIN_SRC emacs-lisp
(require 'ox-deck)
#+END_SRC

#+RESULTS:
: ox-deck

* Agenda
- 什么是函数式编程
- Ruby 的一些函数式特性
- 使用 Monad 纯化/简化控制流

* FBI Warning

[[./images/functional-ruby-qr.jpg]]

#+BEGIN_QUOTE
用 Nokia 的同学请自己手动输入 [[https://git.io/fprb][git.io/fprb]]
#+END_QUOTE

* 我是...
https://www.evernote.com/l/ABcPPnCpE69P3KjZoG_w5zfMmKnkmYMVeVEB/image.png

* 我是...
https://www.evernote.com/l/ABfuI5J5AQlH1LDGI1d-DdQN1frUg3u0eYoB/image.png
[[https://gist.github.com.ru/jcouyang/6336168ecbbf4fbdc46e.png?username=jcouyang&amp;width=400&amp;height=53;.png]]

* 我还是
[[https://img3.doubanio.com/mpic/s25996532.jpg]]
[[https://img1.doubanio.com/mpic/s28861278.jpg]]

* 啊?
https://cloud.githubusercontent.com/assets/1235045/17973424/00e33c72-6b15-11e6-8bdf-a1a58a3631b4.jpg

#+BEGIN_QUOTE
所以是...一个会点 Scala 的 JavaScript 程序员来教 Rubyist 函数式编程?
#+END_QUOTE

* 我在 JavaScript 社区讲函数式的时候, 观众是这样的...
https://cloud.githubusercontent.com/assets/1235045/17973424/00e33c72-6b15-11e6-8bdf-a1a58a3631b4.jpg


* Ruby 函数式 ?

https://cloud.githubusercontent.com/assets/1235045/17933311/321ff7d2-6a46-11e6-903e-8cc84f3acc78.JPG

#+BEGIN_QUOTE
You might be surprised to see Ruby in the list of functional languages because they generally count as object oriented languages.  
-- Martin Odersky
#+END_QUOTE

#+BEGIN_QUOTE
你可能奇怪我把Ruby也放到了函数式语言的列表, 这些语言通常会被归到面向对象语言. 
-- Scala 之父
#+END_QUOTE


* 什么是函数式
https://blog.oyanglul.us/images/data-port.gif
- 一等函数 first class function / 入 lambda
- 纯 purity
- 引用透明性 referential transparency
- 无副作用 side effectless
- 不可变 immutability
- 持久化数据结构 persistent data structures

...当纯到一定程度可能就需要
- 范畴论 Catergory Theory

* 好处呢?

- 好组合 composible
- 好推理 easy to reason about
- 好测试 easy to test
- 好多线程 Multi-thread
- 好玩 fun
- 好 +高逼格 high bigger+ elegant

* 你可能不知道的Ruby
https://cloud.githubusercontent.com/assets/1235045/17936038/020c3f88-6a50-11e6-88bd-6c6ad6815495.png

* lambda aka 匿名函数
[多选题] 请选出所有的 lambda
#+BEGIN_SRC ruby
A: {}/do end # such as =[1,2,3].map{|x| x+1 }=
B: plus1 = lambda {|x| x + 1 }
C: plus1 = -> (x) { x + 1 }
D: plus1 = Proc.new { |x| x + 1 }
#+END_SRC

* 万物皆对象, lambda 也不例外
lambda 也就是一个正常的对象
#+BEGIN_SRC ruby 
plus1 = ->(x) { x + 1 }
#+END_SRC

#+RESULTS:
: #<Proc:0x007fbaea988030@-:3 (lambda)>

* 如果给这个lambda一个引用,我们可以跟用method一样用
#+BEGIN_SRC ruby 
  plus1 = ->(x) { x + 1 }
  plus1.call(3)
  plus1.(3)
  plus1[3]
#+END_SRC

#+RESULTS:
: 4

* 三等公民
#+BEGIN_SRC ruby  :results pp
  def plus1 x
    x + 1
  end
  [1,2,3,4].map &plus1
#+END_SRC

: `plus1': wrong number of arguments (0 for 1) (ArgumentError)

* 一等 vs 三等
https://www.evernote.com/l/ABcXHBGTERhJv5sNDPdAeiseZP0ke-Pd9TYB/image.png

* 一等公民 Proc
#+BEGIN_SRC ruby  :results pp
plus1 = ->(x) { x + 1 }
[1,2,3,4].map &plus1
#+END_SRC

#+RESULTS:
: [2, 3, 4, 5]

* 给三等座升个舱
#+BEGIN_SRC ruby  :results pp
  def plus1 x
    x + 1
  end
  first_class_plus1 = method(:plus1)
  [1,2,3,4].map &first_class_plus1
#+END_SRC

#+RESULTS:
: [2, 3, 4, 5]

* 升舱的魔法 =#to_proc=
#+BEGIN_SRC ruby
method(:plus1)
# => #<Method: Object#plus1>
#+END_SRC

#+BEGIN_SRC ruby
  class Method
    def to_proc
      lambda{|*args|
        self.call(*args)
      }
    end
  end
#+END_SRC

* 升舱实例2 - Symbol
#+BEGIN_SRC ruby  :results pp
  %w(ouyang jichao).map &:capitalize 
  # ===
  %w(ouyang jichao).map { |x| x.capitalize}
#+END_SRC

#+RESULTS:
: ["Ouyang", "Jichao"]

* 来 🍬 Desugar =&=

#+BEGIN_SRC ruby
  %w(ouyang jichao).map &:capitalize.to_proc
#+END_SRC

#+BEGIN_SRC ruby
  %w(ouyang jichao).map &Proc.new(|x| x.send(:capitalize))
#+END_SRC

#+RESULTS:
: ["Ouyang", "Jichao"]

* 模式匹配 pattern matching
https://i.giphy.com/3o6MbdPcxvF7Hb5G3S.gif

* destructure - 数组
#+BEGIN_SRC ruby :results pp
first, *middle_and_last = ['Phillip', 'Jay', 'Fry']
"first: #{first}, middle_and_last: #{middle_and_last}"
#+END_SRC

#+RESULTS:
: "first: Phillip, middle_and_last: [\"Jay\", \"Fry\"]"

* destructure - 哈希
方法的参数会自带 destructure 哈希的功能 aka =keyword arguments=:
#+BEGIN_SRC ruby :results pp
  fry = {first: 'Phillip', middle: 'Jay', last: 'Fry'}
  def printFirstName first:, **rest
    p first, rest
  end
  printFirstName fry
#+END_SRC

#+RESULTS:
: ["Phillip", {:middle=>"Jay", :last=>"Fry"}]

* case when
ruby 中的 case 可以搞定这几种模式匹配
- 值/表达式
- 类型
- Proc
- 正则

* 值
这个很简单，应该都有用过
#+BEGIN_SRC ruby
  me = 'ouyang'
  case me
  when 'ouyang' 
    "hehe #{me}"
  else 'hehe jichao'
  end
#+END_SRC

#+RESULTS:
: hehe ouyang

* 类型
#+BEGIN_SRC ruby
  class Me
    def initialize name
      @name = name
    end

    def heheda
      "呵呵哒 #{@name}"
    end
  end

  me = Me.new 'ouyang'

  case me
  when Me
    me.heheda
  else
    '呵呵哒了'
  end
#+END_SRC

* lambda （aka guard）
#+BEGIN_SRC ruby
  require 'ostruct'
  me = OpenStruct.new(name: 'jichao', first_name: 'ouyang')
  case me
  when ->(who){who.name=='jichao'}
    "hehe #{me}"
  end
#+END_SRC

#+RESULTS:
: hehe #<OpenStruct name="jichao", first_name="ouyang">

* /正则/
#+BEGIN_SRC ruby
case 'jichao ouyang'
when /ouyang/
"呵呵哒"
end
#+END_SRC

#+RESULTS:
: "呵呵哒"

* 但其实只是个简单的语法糖
case when 并不是magic，其实只是 if else 的语法糖, 比如上面说的正则
#+BEGIN_SRC ruby
  if(/ouyang/ === 'jichao')
    "heheda"
  end
#+END_SRC

所以 magic 则是所有 when 的对象都实现了 ~===~ 方法而已
- 值： ~object.===~ 会代理到 ~==~
- 类型： ~Module.===~ 会看是否是其 instance
- 正则： ~regex.===~ 如果匹配返回 true
- 表达式：取决于表达式返回的值的 ~===~ 方法
- lambda： ~proc.===~ 会运行 lambda 或者 proc

* 
https://i.giphy.com/55xWvUIMb51mw.gif
#+BEGIN_QUOTE
说了这么些奇技淫巧, +逼格还是不够高呀+ 除了花式一些有什么用呢?
#+END_QUOTE

#+BEGIN_QUOTE
纯 pure
#+END_QUOTE

* Category Theory
#+BEGIN_QUOTE
Monad - 自函子范畴上的含幺半群
#+END_QUOTE

* 一个简单 🌰
#+BEGIN_QUOTE
把大象放冰箱里需要几步
#+END_QUOTE
https://www.evernote.com/l/ABeEwMnpRdVB7pup8Sw-KV3Iq02sI7fSe90B/image.png

* 命令式放大象
#+BEGIN_SRC ruby
  opened_fridge = open_fridge
  if opened_fridge
    fridge_w_elephent = put_elephent_in opened_fridge
    if fridge_w_elephent
      closed_fridge = close_fridge
      if closed_fridge
        'yay'
      else
        'fail to close fridge'
      end
    else
      'fail to put elephent in'
    end
  else
    'fail to open fridge'
  end
#+END_SRC

* 监控
#+BEGIN_SRC ruby
  opened_fridge = open_fridge
  if opened_fridge
    Monitoring.logger.info('fridge opened')
    fridge_w_elephent = put_elephent_in opened_fridge
    if fridge_w_elephent
      Monitoring.logger.info('puted a elephent into fridge')
      closed_fridge = close_fridge
      if closed_fridge
        Monitoring.logger.info('fridge closed')
        'yay'
      else
        Monitoring.logger.error('no able to close fridge')
        'fail to close fridge'
      end
    else
      Monitoring.logger.error('elephent put failed')
      'fail to put elephent in'
    end
  else
    Monitoring.logger.error('fail to open fridge')
    'fail to open fridge'
  end
#+END_SRC

* 或者用更极端的抛异常方式
#+BEGIN_SRC ruby
  begin
    close(put_elephent_in open_fridge)
  rescue A=>e
   ...
  rescue B=>e
   ...
  rescue C=>e
   ...
  end
#+END_SRC

* 广告时间

#+BEGIN_EXAMPLE
😹 ➡️ 😼
⬇️ ↘️ ⬇️
🙀 ➡️ 😻
#+END_EXAMPLE
#+BEGIN_QUOTE
猫呢?

https://git.io/cats.rb
#+END_QUOTE

* 让我们用一个简单的 [[https://github.com/jcouyang/cats.rb#dataeither][Either Monad]]
#+BEGIN_EXAMPLE
gem install data.either
#+END_EXAMPLE

#+BEGIN_SRC ruby :eval no
require 'data.either'
Right.new(1).flat_map do |x| 
  if x < 1
    Left.new('meh')
  else
    Right.new(x+1)
  end
end
# => #<Right 2>
#+END_SRC

* 来简化控制流
#+BEGIN_SRC ruby :eval no
  open_fridge.flat_map do |fridge|  # <= 1
    put_elephent_in fridge          # <= 2
  end.flat_map do |fridge|
    close fridge                    # <= 3
  end
#+END_SRC

这样可以专心构造控制逻辑,而不需要关心上一步如果错误该怎么办

* 怎么做到的
https://i.giphy.com/12dBjCf9NclhBe.gif

* 
https://www.evernote.com/l/ABfo-EYfrKlJ9L8jv7jh_927W-0Z3h7_FZsB/image.png

* Either 魔法
#+caption: https://github.com/jcouyang/cats.rb/blob/master/lib/data.either.rb
#+BEGIN_SRC ruby :eval no
  def flat_map
    case self
    when Right
      yield @v
    else
      self
    end
  end
#+END_SRC

* 一个更实际的 🌰
用 microservices 组合成新的 service

https://www.evernote.com/l/ABd47442ZCNJHbYn1sfcZhZtV2jFjftPdRwB/image.png

* 上图有几次 IO
- 总共4个IO, 每一步骤都可能出错
- 但程序猿不希望漏掉任何错误信息
- 但是又不能为了监控,影响了这个简单的工作流

* 控制流不关心失败和监控
#+BEGIN_SRC haskell
  do
    a <- fetchA
    b <- fetchB
    c <- put $ blah a ++ b
#+END_SRC

* IO自挂东南枝
https://www.evernote.com/l/ABeIbzxUeghNkZMGpgZljl8K0P6JNasFga4B/image.jpg

* 
#+BEGIN_SRC ruby :eval no
  def fetch(endpoint, decoder)
    response = self.class.get(endpoint, format: :json)
    case response.code
    when 410
      Left.new(Exceptions::DataFailure.new("Resource #{endpoint} was deleted"))
    when 404
      Left.new(Exceptions::DataFailure.new("Resource #{endpoint} not exist"))
    when 200
      Right.new decoder.from_json(response.body)
    else
      Left.new(Exceptions::RepositoryError.new("Fetching #{endpoint} with Error:\n#{endpoint}, response code: #{response.code}"))
    end
  end
#+END_SRC

* 
#+BEGIN_SRC ruby :eval no
  failure_processed, success_processed = Either.partition Mapinator.run

  Monitoring.send_processed success_processed.length
  Monitoring.logger.info("Processed successful #{success_processed.length} listings: #{success_processed}")
  Monitoring.logger.error("Processed FAILURE #{failure_processed.length} with Exceptions:") unless failure_processed.empty?
  ...
#+END_SRC

* 还可不可以在纯一些
https://imgs.xkcd.com/comics/haskell.png

* Free Monad aka Interpreter Pattern
https://www.evernote.com/l/ABe66Nse7nlPpKWTYgGPBFWt1Uv_m-ZFn_cB/image.png

* 有些像 Cons
https://www.evernote.com/l/ABecKErC7s5Mpa6cfyAt3mL7zpTS9v1N85QB/image.png

* 还有...
- Coyoneda
- Free Monoid
- State
- EitherT
- MaybeT
- ...

* 
#+BEGIN_QUOTE
这些我都不会讲...
#+END_QUOTE


* 
#+BEGIN_QUOTE
因为我不会讲...
#+END_QUOTE

希望不久之后可以... 
#+BEGIN_EXAMPLE
gem install control.monad.free
#+END_EXAMPLE

* Q/A

* 性能
https://www.evernote.com/l/ABdxEUHAmZlMII8QBKAYYtI5xgY4KkO1T7MB/image.png
#+BEGIN_QUOTE
你TM都选 Ruby 了还在乎性能?
#+END_QUOTE

* 并发多线程 made easy
#+BEGIN_SRC ruby :eval no
require "celluloid/autostart"

module Enumerable
  def pmap(&block)
    futures = map { |elem| Celluloid::Future.new(elem, &block) }
    futures.map(&:value)
  end
end
#+END_SRC

* 多谢
- https://blog.oyanglul.us/functional-ruby.html
- https://github.com/jcouyang/cats.rb
- https://github.com/typelevel/cats
- http://hackage.haskell.org/package/base-4.8.1.0/docs/src/Data.Either.html
- https://wiki.haskell.org/Free_structure
- http://underscore.io/blog/posts/2015/04/23/deriving-the-free-monad.html
- http://underscore.io/blog/posts/2015/04/14/free-monads-are-simple.html
- https://www.coursera.org/learn/progfun2
- https://www.amazon.com/Well-Grounded-Rubyist-David-Black/dp/1933988657
- https://mitpress.mit.edu/sicp
