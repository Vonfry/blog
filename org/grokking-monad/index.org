#+TITLE: 范畴论完全装逼手册 / Grokking Monad
#+Date: <2017-02-10 Fri>
#+AUTHOR: 欧阳继超
#+OPTIONS: ^:t
#+MACRO: ruby @@html:<ruby>$1<rt>$2</rt></ruby>@@

很多人都不明白什么是Monad，并不是因为不会用，不知觉可能就在用某种 monad。\\
定义和使用起来其实不难，困惑的大多应该是后面的这堆理论-- 范畴论。当然，我也没学过范畴论，只是略微看得懂写Haskell罢了。

我在书中[[https://book.douban.com/subject/26883736/][写过一章]]来解释，某人也尝试过很[[http://www.ruanyifeng.com/blog/2017/02/fp-tutorial.html][写博客解释]]，比如为了降低门槛用JS来，那Haskell/Scala的人出来喷你们前端这些不懂函数式的渣渣乱搞出来的东西根本就不是 monad。

我也画过一些图来解释，又会被嫌弃画风不好。但是，作为灵魂画师，我只 +是觉得自己萌萌的啊+ 在乎画的灵魂是否能够给你一点启发。好吧，讲这么学术的东西，还是用dot来画吧，看起来好正规呢。

好了，安全带系好，我真的要开车了。为了 +防止鄙视链顶端的语言用户们喷再嫌弃+ 解释的不到位，就用 Haskell 好了（虽然haskell也没到鄙视链顶），其实也不难解释清楚 +才怪+ 。

这里面很多很装逼的单词，它们都是 /斜体/ ，就算没看懂，把这些词记住也足够{{{ruby(装一阵子逼了,买一阵子萌了)}}}。

* COMMENT
#+BEGIN_SRC emacs-lisp
(require 'ob-dot)
#+END_SRC

#+RESULTS:
: ob-dot

* 第一部分：{{{ruby(范畴论,Catergory Theory)}}}
** /Category/
#+INDEX: Catergory
#+INDEX: 范畴

一个 /{{{ruby(范畴,Category)}}}/ 包含两个玩意
- 东西 =O= （Object）
- 两个东西的关系，箭头 =~>= （ /{{{ruby(态射,Morphism)}}}/ ）

一些属性
- 一定有一个叫 id 的箭头，也叫做 1
- 箭头可以 /{{{ruby(组合, compose)}}}/

恩，就是这么简单

#+BEGIN_SRC dot :file images/category.svg :exports results
  digraph {
          label="Category"
          rankdir=RL
          a -> b [label=g]
          b -> c [label=f]
          a -> a [label=id]
          b -> b [label=id]
          c -> c [label=id]
          a -> c [label="f . g"]
  }
#+END_SRC

#+CAPTION: 有东西 a, b, c 和箭头 f, g 的 Category，其中 f . g 表示 compose f 和 g
#+RESULTS:
[[file:images/category.svg]]

这些玩意对应到 haskell 的 typeclass 大致就是这样
#+BEGIN_SRC haskell
class Category (c :: * -> * -> *) where
  id :: c a a
  (.) :: c y z -> c x y -> c x z
#+END_SRC

如果这是你第一次见到 Haskell 代码，没有关系，语法真的很简单 +才怪+
- =class= 定义了一个 TypeClass， =Category= 是这个 TypeClass 的名字
- Type class 类似于定义类型的规范，规范为 =where= 后面那一坨
- 类型规范的对象是参数 ~(c:: * -> * -> *)~ ， =::= 后面是c的类型
- c 是 /higher kind/ ，跟higher order function的定义差不多，它是接收类型，构造新类型的类型。这里的 c 接收一个类型，再接收一个类型，就可以返回个类型。
- ~id:: c a a~ 表示 c 范畴上的 a 到 a 的箭头
- =.= 的意思 c 范畴上，如果喂一个 y 到 z 的箭头，再喂一个 x 到 y 的箭头，那么就返回 x 到 z 的箭头。

{{{ruby(简单吧,hen nan ba)}}}?还没有高数抽象呢。

*** /Hask/
Haskell 类型系统范畴叫做 Hask
#+INDEX: Hask

在 Hask 范畴上：

- 东西是类型
- 箭头是类型的变换，即 =->=
- id 就是 id 函数的类型 =a -> a=
- compose 当然就是函数组合的类型

#+BEGIN_SRC haskell
type Hask = (->)
instance Category (Hask:: * -> * -> *) where
  (f . g) x = f (g x)
#+END_SRC

我们看见新的关键字 =instance= ，这表示 Hask 是 Type class Category 的实例类型，也就是说我们可以Hask的个构造器去真的构造一个类型

比如：
#+BEGIN_SRC haskell
(->) a a
#+END_SRC
就构造了一个从a类型到a类型的的类型

构造出来的这个类型可以作为 id 函数的类型
#+BEGIN_SRC haskell
id :: (->) a a
#+END_SRC

** /{{{ruby(函子, Functor)}}}/
#+INDEX: Functor
#+INDEX: 函子
两个范畴中间可以用叫 Functor 的东西来连接起来，简称 T。

#+BEGIN_SRC dot :file images/functor.svg :exports results
  digraph {

  label="Functor C D G"
  compound=true;
  rankdir=RL
  subgraph cluster_C {
          style=dotted
          label="C"
          a -> a [label=id]
          a -> b [label=g]
          b -> c [label=f]
          a -> c [label="f . g"]
  }
  subgraph cluster_D {
          style=dotted
          label=D
          "G a" -> "G a" [label="G id"]
          "G a" -> "G b" [label="G g"]
          "G b" -> "G c" [label="G f"]
          "G a" -> "G c" [label="G f . g = G f . G g"]
  }

  c ->"G a"[ltail=cluster_C,lhead=cluster_D,label=G]
  }
#+END_SRC

#+CAPTION: Functor C D G, 从 C 到 D 范畴的Functor G
#+RESULTS:
[[file:images/functor.svg]]

所以大部分把Functor/Monad比喻成盒子其实在定义上是错的，虽然这样比喻比较容易理解，在使用上问题也不大。但是，Functor只是从一个范畴到另一个范畴的映射关系而已。

- 范畴间 东西的 Functor 标记为 =T(O)=
- 范畴间 箭头的 Functor 标记为 =T(~>)=
- 任何范畴C上存在一个 T 把所有的 O 和 ~> 都映射到自己，标记为id functor 1_C
  - 1_C(O) = O
  - 1_C(~>) = ~>

#+BEGIN_SRC haskell
class (Category a, Category b) => Functor a b t where
  fmap :: c a b -> d (t a) (t b)
#+END_SRC

=Functor a b t= 这表示从范畴 a 到范畴 b 的一个 Functor t

如果把范畴 a 和 b 都限制到 Hask 范畴

#+BEGIN_SRC haskell
class Functor (->) (->) t where
  fmap :: (->) a b -> (->) (t a) (t b)
#+END_SRC

=->= 在 Haskell 中是中缀类型构造器，所以是可以写在中间的

这样就会变成我们熟悉的 Funtor 的 Typeclass（把Functor 的第一第二个参数去掉的话）
#+BEGIN_SRC haskell
class Functor t where
  fmap :: (a -> b) -> (t a -> t b)
#+END_SRC

而 /{{{ruby(自函子,endofunctor)}}}/ 就是这种连接相同范畴的 Functor，因为它从范畴 Hask 到达同样的范畴 Hask
#+INDEX: endofunctor
#+INDEX: 自函子

这里的 fmap 就是 T(~>)，在 Hask 范畴上，所以是 T(->), 这个箭头是函数，所以也能表示成 T(f) 如果 =f:: a -> b=

** /{{{ruby(Cat, +猫+)}}}/
当我们把一个Category看成一个object，functor看成箭头，那么我们又得到了一个Category，这种object是category的category我们叫它 -- /Cat/

已经没法讲了，看 TODO 图吧

** /{{{ruby(自然变换,Natural Transformations)}}}/
#+INDEX: Natural Transformations
#+INDEX: 自然变换
Functor 是范畴间的映射，而 Functor 在 Cat 范畴又是个箭头，所以，Functor间的映射，也就是 Cat 范畴上的 Functor，叫做 /自然变换/

#+BEGIN_SRC dot :file images/natrual-transformation.svg :exports results
  digraph {
  label="Functor F 到 G 的自然变换"
  compound=true;
  rankdir=RL
  subgraph cluster_C {
          style=dotted
          label="C"
          a -> a [label=id]
          a -> b [label=g]
          b -> c [label=f]
          a -> c [label="f . g"]
  }
  subgraph cluster_D {
          style=dotted
          label=D
          "G a" -> "G a" [label="G id"]
          "G a" -> "G b" [label="G g"]
          "G b" -> "G c" [label="G f"]
          "G a" -> "G c" [label="G f . g = G f . G g"]
  }
  subgraph cluster_E {
          style=dotted
          label=E
          "F a" -> "F a" [label="F id"]
          "F a" -> "F b" [label="F g"]
          "F b" -> "F c" [label="F f"]
          "F a" -> "F c" [label="F f . g = F f . F g"]
  }

  subgraph FunctorCategory {
          style=dotted
          label="Functor Category"
          rank=same;
          functorG [label="G",shape=plaintext,width=0.01, height=0.01];
          functorF [label="F", shape=plaintext, width=0.01, height=0.01];
  }
  functorF -> functorG[label="η"]
  c -> functorG [arrowhead=none]
  c -> functorF [arrowhead=none]
  functorG ->"G a"[ltail=cluster_C,lhead=cluster_D]

  functorF ->"F a"[ltail=cluster_C,lhead=cluster_E]
  }
#+END_SRC

#+CAPTION: Functor F和G，以及 F 到 G 的自然变化 \eta
#+RESULTS:
[[file:images/natrual-transformation.svg]]

所以范畴 c 上的函子 f 到 g 的自然变化就可以表示成
#+BEGIN_SRC haskell
type Nat c f g = c (f a) (g a)
#+END_SRC

Hask 范畴上的自然变化就变成了
#+BEGIN_SRC haskell
type NatHask f g = f a -> g a
#+END_SRC

有趣的是，自然转换也满足箭头的概念，可以当成 functor 范畴上的箭头，所以又可以定义出来一个 Functor Catergory

- 东西是函子
- 箭头是自然变换

要成为范畴，还有两点
- id 为 f a 到 f a 的自然变换
- 自然变换的组合

#+BEGIN_SRC dot :file images/functor-category.svg :exports results
digraph FunctorCategory {
          style=dotted
          label="Functor Category"
          rank=same;
          functorG [label="G",shape=plaintext,width=0.01, height=0.01];
          functorF [label="F", shape=plaintext, width=0.01, height=0.01];
functorF -> functorG[label="η"]
  }
#+END_SRC

#+RESULTS:
[[file:images/functor-category.svg]]

我们来梳理一下，已经不知道升了几个维度了，我们假设类型是第一维度
- 一维：范畴 Hask，东西是类型，箭头是 ->
- 二维：范畴 Cat， 东西是 Hask， 箭头是 Functor
- 三维：范畴 Functor， 东西是Functor， 箭头是自然变换

感觉到达三维已经是极限了，尼玛还有完没完了，每升一个维度还要起这么多装逼的名字，再升维度就要一脸懵逼了呢。虽然维度不算太高，但是已经不能用简单的图来描述了，所以需要引入 String Diagram。

** TODO String Diagram

T1 是 范畴 a 到 b 的functor

T2 是范畴 b 到 c 的functor

那么 T2 . T1 就是 a 到 c 的funtor咯

如果 T 是范畴a上的endofunctor

那么可以 T.T 可以写成 TT 或者 T^2

那么 compose 完的箭头张什么样呢？

用 Maybe Functor来说

#+BEGIN_SRC haskell
-- Functor category
newtype Fun f g a b = FNat (f a -> g b)

-- Endofunctor category
type End f = Fun f f

instance Category (End f) where
  id = FNat id
  (FNat f) . (FNat g) = FNat (f . g)
#+END_SRC

** TODO /Adjunction Functor/ 伴随函子
#+INDEX: Adjunction Functor
范畴C和D直接有来有回的函子
** TODO Yoneda lemma / +米田共+ 米田引理
#+INDEX: 米田引理
#+INDEX: Yoneda Lemma

米田引理是说所有Functor =f a= 一定存在 embed 和 unembed，使得 =f a= 和 =(a -> b) -> F b= isomorphic 同构
#+INDEX: isomorphic
#+INDEX: 同构

haskell还要先打开 RankNTypes 的 feature

#+BEGIN_SRC haskell
{-# LANGUAGE RankNTypes #-}

embed :: Functor f => f a -> (forall b . (a -> b) -> f b)
embed x f = fmap f x

unembed :: Functor f => (forall b . (a -> b) -> f b) -> f a
unembed f = f id
#+END_SRC

embed 可以把 functor =f a= 变成 =(a -> b) -> f b=

unembed 是反过来， =(a -> b) -> f b= 变成 =f a=
*** Rank N Type
#+INDEX: Arbitrary-rank polymorphism
#+INDEX: Rank N Type
- Monomorphic Rank 0 / 0级单态: t
- Polymorphic Rank 1 / 1级 +变态+ 多态: forall a. a -> t
- Polymorphic Rank 2 / 2级多态: (forall a. a -> t) -> t
- Polymorphic Rank 3 / 3级多态: ((forall a. a -> t) -> t) -> t

看rank几只要数左边 forall 的括号嵌套层数就好了

一级多态锁定全部类型变化中的类型a

二级多态可以分别确定 a -> t 这个函数的类型多态

比如
#+BEGIN_SRC haskell
rank2 :: (forall a. a -> a) -> (Bool, Char)
rank2 f = (f True, f 'a')
#+END_SRC

- f 在 =f True= 时类型 =Boolean -> Boolean= 是符合 =forall a. a->a= 的
- 在 =f 'a'= 时类型是 =Char -> Char= 也符合 =forall a. a->a=

但是到rank1就类型系统就懵逼了
#+BEGIN_SRC haskell
rank1 :: forall a. (a -> a) -> (Bool, Char)
rank1 f = (f True, f 'a')
#+END_SRC
f 在 =f True= 是确定 a 是 Boolean，在rank1多态是时就确定了 =a->a= 的类型一定是 =Boolean -> Boolean=

所以到 =f 'a'= 类型就挂了。

** /Monad/ 单子
有了 Functor，解释 Monad 就简单了。Monad 的定义比 Functor 再多一些要求
- 首先，它是一个 endofunctor T
- 一个从 i_c 到 T 的自然变化 \eta (eta)
- 一个从 T^2 到 T 的自然变化 \mu (mu)

#+BEGIN_SRC haskell
class Endofunctor c t => Monad c t where
  eta :: c a (t a)
  mu  :: c (t (t a)) (t a)
#+END_SRC

同样，把 c = Hask 替换进去，就得到更类似我们 Haskell 中 Monad 的定义
#+BEGIN_SRC haskell
class Endofunctor m => Monad m where
  eta :: a -> (m a)
  mu :: m m a -> m a

#+END_SRC
** /Kleisli Catergory/
#+INDEX: Kleisi Catergory

#+CAPTION: f和g画翻了 😂 不过逻辑式对的，注意 >>= 和大火箭 <=< 的轨迹
https://www.evernote.com/l/ABeNc2skWiZCdLKdJGy4h8L_2GeUo-EDHGsB/image.jpg

Functor 的 Catergory 叫做 Functor Catergory，因为有箭头自然变换。Monad 也可以定义出来一个 Catergory（当然由于Monad是 Endofunctor，所以他也可以是 自函子范畴），叫做 Kleisli Catergory，那么 Kleisli 的箭头是什么？

我们看定义，Kleisli Catergory
1. 箭头是 Kleisli 箭头 =a -> T b=
2. 东西就是c范畴中的东西. 因为 a 和 b 都是 c 范畴上的， 由于T是自函子，所以 T b 也是 c 范畴的

看到图上的 g' 和 \mu 了没？

- g':: T b -> T^2 c
- \mu :: T^2 c -> T c

所以
- (>>=) = \mu . g'
- 大火箭 (<=<) = \mu . g' . f' = \mu . F g . f'

大火箭满足compose

(y -> T z) <=< (x -> T y) = (x -> T z)

沿着图上轨迹找找看

#+BEGIN_QUOTE
第一部分理论部分都讲完了， 如果你读到这里还没有被这些{{{ruby(吊炸天,乱七八糟)}}}的概念搞daze，接下来可以看看它到底跟我们编程有鸟关系呢？第二部分将介绍这些概念产生的一些实用的monad

当然我还没空全部写完，如果有很多人{{{ruby(预定,只要998)}}} Gumroad 上的 @@html: <script src="https://gumroad.com/js/gumroad.js"></script><a class="gumroad-button" href="https://gum.co/grokking-monad" target="_blank">Grokking Monad</a>@@ 电子书的话，我可能会稍微写得快一些。毕竟，写了也没人感兴趣也怪浪费时间的。不过，我猜也没几个人能看到这一行。
#+END_QUOTE

* TODO 第二部分：{{{ruby(食用猫呢, Practical Monads)}}}
一些有用的 Monad instances
** Applicative
*** Alternative
*** Arrow
*** Bifunctor

** Either
** Validate
** Reader
给一个computation喂数据
输入 r
asks 可以通过函数 r->a 得到一个 Reader r a monad
#+BEGIN_SRC haskell
asks :: (r -> a) -> Reader r a
runReader :: Reader r a -> r -> a

import Control.Monad.Reader

data MyContext = MyContext
  { foo :: String
  , bar :: Int
  } deriving (Show)

computation :: Reader MyContext (Maybe String)
computation = do
  n <- asks bar
  x <- asks foo
  if n > 0
    then return (Just x)
    else return Nothing

ex1 :: Maybe String
ex1 = runReader computation $ MyContext "hello" 1

ex2 :: Maybe String
ex2 = runReader computation $ MyContext "haskell" 0
#+END_SRC
** Writter
除了返回值，computation会写一些额外的数据

返回值会是一个这样 =(result, log)= 的 tuple

限制是 log 的类型必须是个 monoid

#+BEGIN_SRC haskell
example  = do
  tell [1..3]
  tell [3..5]
  return "foo"

output :: (String, [Int])
output = runWriter example
-- ("foo", [1, 2, 3, 3, 4, 5])
#+END_SRC
** State

** RWS
** Expection
** Monad Transform
** Cont
** MonadPlus
** MonadFix
** ST
** Free Monad
** Eff

* References
- http://dev.stephendiehl.com/hask
- https://www.youtube.com/watch?v=ZKmodCApZwk
- https://en.wikibooks.org/wiki/Haskell/Category_theory
