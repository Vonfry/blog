* Theme

我的最爱 tomorrow theme eighties

https://github.com/purcell/color-theme-sanityinc-tomorrow

#+BEGIN_SRC emacs-lisp
  (load-theme 'sanityinc-tomorrow-eighties)
#+END_SRC

also, there're plainty of popular theme of your choice

http://emacsthemes.caisah.info/installed-emacs-themes/

* Global Modes
有一些全局基本设置，可以让emacs能基本适应我的习惯
- 开启server，方便从terminal使用 =emacsclient=  [[(server)]]
- Meta key 设为 =Command= （我用的是mac）[[(meta-key)]]
- 把 =C-h= 映射到 =C-?= ，因为帮助功能不是很有用，但是 =C-h= 这个unix系统下的默认是删除键，使用太频繁了。[[(delete-key)]]
#+BEGIN_SRC emacs-lisp -n -r
  (server-start) (ref:server)
  (global-superword-mode 1) 
  (when (eq system-type 'darwin)
    (setq mac-option-modifier 'alt)  
    (setq mac-command-modifier 'meta)) (ref:meta-key)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (delete-selection-mode 1) ; delete selection when paste
  (keyboard-translate ?\C-h ?\C-?) (ref:delete-key)
  (global-auto-revert-mode 1)  ;auto revert buffers when changed on dis
  (global-prettify-symbols-mode 1)
  (setq locate-command "mdfind")
  (setenv "PATH" (concat (getenv "PATH") ":/usr/local/share/npm/bin:/usr/local/bin"))
  (setq exec-path (append exec-path '("/usr/local/bin")))

#+END_SRC

#+RESULTS:

* Key Bindings

emacs 最大亮点之一就是其快捷键众多, 当然用户都喜欢根据自身爱好定义最高效的
快捷键, 因此, 把这些定义都放到这里定义更方便与管理,更新,和查找.

#+NAME: gen-keys
#+BEGIN_SRC emacs-lisp :var keys=keys :results output :tangle no :exports none :colnames nil
  (mapcar (lambda (l)
            (let* ((key (car l))
                   (def (if (string-match "^[[:alnum:]]\\{2\\}$" (format "%s" key))
                            (format "key-chord-define-global \"%s\"" key)
                          (format "global-set-key (kbd \"%s\")" key)))
                   (command (car (last l))))
                   (princ (format "(%s %s)\n" def command))))
            keys)
#+END_SRC

#+BEGIN_SRC emacs-lisp :noweb yes :results silent
  <<gen-keys()>>
#+END_SRC

这些快捷键绑定在一个table里定义, 这样便于管理和更新.

****                                                            :noexport:
#+TBLNAME: keys        
| Combo   | Category | Desciption                                         | Command                     |
|---------+----------+----------------------------------------------------+-----------------------------|
| M-q     | General  | Kill emacs (including the daemon if it is running) | 'save-buffers-kill-terminal |
| C-c h o | Helm     | Helm occur                                         | 'helm-occur                 |
| C-c h x | Helm     | Helm register                                      | 'helm-register              |
| M-x     | Helm     | Helm M-x (execute command)                         | 'helm-M-x                   |
| C-x b   | Helm     | Helm mini                                          | 'helm-mini                  |
| M-y     | Helm     | Helm Yank                                          | 'helm-show-kill-ring        |
| M-0     | Helm     | Helm find files with Git                           | 'helm-git-find-files        |
| M-z     | Editing  | Undo                                               | 'undo                       |
| M-S-z   | Editing  | Redo                                               | 'redo                       |
| C-8     | Editing  | Select symbol under cursor, repeat to expand       | 'er/expand-region           |
| M-8     | Editing  | Contract the current selection                     | 'er/contract-region         |


* Modes

** cider
#+BEGIN_SRC emacs-lisp
(setq org-babel-clojure-backend 'cider)
#+END_SRC

** company
Completion will start automatically after you type a few letters. Use M-n and M-p to select, <return> to complete or <tab> to complete the common part. Search through the completions with C-s, C-r and C-o. Press M-(digit) to quickly complete with one of the first 10 candidates.

When the completion candidates are shown, press <f1> to display the documentation for the selected candidate, or C-w to see its source. Not all back-ends support this.

document

#+BEGIN_SRC emacs-lisp
  (require 'company)
  (add-to-list 'company-backends 'company-dabbrev t)
  (add-to-list 'company-backends 'company-ispell t)
  (add-to-list 'company-backends 'company-files t)
  ;; not always down case
  (setq company-dabbrev-downcase nil)
  (add-hook 'after-init-hook 'global-company-mode)

#+END_SRC

#+RESULTS:
| global-company-mode |

** deft
#+BEGIN_SRC emacs-lisp
  (setq
   deft-extension "org"
   deft-directory "~/Dropbox/org/deft"
   deft-text-mode 'org-mode
   deft-use-filename-as-title t
   )
#+END_SRC

** helm
this is worth reading when you just start using helm http://tuhdo.github.io/helm-intro.html

helm 可以让你很方便的在项目里快速浏览文件
#+BEGIN_SRC emacs-lisp -n -r
        (require 'helm-config)
        (require 'helm-git-grep)
        (helm-mode 1)
        (helm-autoresize-mode 1)
        (projectile-global-mode)
        (global-set-key (kbd "C-c h") 'helm-command-prefix)
        (global-unset-key (kbd "C-x c"))
        (setq projectile-completion-system 'helm
              helm-M-x-fuzzy-match t
              helm-buffers-fuzzy-matching t 
              helm-recentf-fuzzy-match t
              helm-ag-fuzzy-match t (ref: ag-fuzzy-match)
              projectile-enable-caching t (ref:caching)
              helm-locate-fuzzy-match t
              projectile-indexing-method 'alien) (ref:indexing)
        (helm-projectile-on)
        (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
        (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB works in terminal
        (define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z
#+END_SRC

#+RESULTS:
: helm-select-action

其中第[[(caching)]]和[[(indexing)]]两行能加速projectile index一个大的repo时的速度。

** Nyancati
#+BEGIN_SRC emacs-lisp
(nyan-mode t)
#+END_SRC

** org
#+BEGIN_SRC emacs-lisp

  (setq org-directory "~/Dropbox/org")
  (setq org-default-notes-file "~/Dropbox/org/refile.org")
  (setq org-mobile-inbox-for-pull "~/Dropbox/org/flagged.org")
  (setq org-mobile-directory "~/Dropbox/org/mobile")

  (add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
  (setq org-startup-folded 'nofold)
  (setq org-startup-indented t)
  (setq org-startup-with-inline-images t)
  (setq org-startup-truncated t)
  (setq org-refile-targets '((org-agenda-files :maxlevel . 5)))
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
  (setq org-confirm-babel-evaluate nil)
  (setq org-use-speed-commands t)
  (setq org-default-notes-file (concat org-directory "/todo.org"))
  (setq org-capture-templates
        '(
          ("t" "Task" entry (file+headline "" "Tasks") "* TODO %?\n  %u\n  %a")
          ("s" "Simple Task" entry (file+headline "" "Tasks") "* TODO %?\n  %U\n")
          ))

  (add-to-list 'org-structure-template-alist '("E" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC\n"))
  (add-to-list 'org-structure-template-alist '("S" "#+BEGIN_SRC shell-script\n?\n#+END_SRC\n"))
  
  ;; minted
  (add-to-list 'org-latex-packages-alist '("" "minted"))
  (setq org-latex-listings 'minted)
  
  (setq org-latex-pdf-process
  '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
  "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
  "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
  
  (setq
  appt-display-mode-line t     ; show in the modeline
  appt-display-format 'window)
  (appt-activate 1)              ; activate appt (appointment notification)
  
  (org-agenda-to-appt)           ; add appointments on startup
  
  ;; add new appointments when saving the org buffer, use 'refresh argument to do it properly
  (add-hook 'org-mode-hook
  (lambda ()
  (add-hook 'after-save-hook '(lambda () (org-agenda-to-appt 'refresh)) nil 'make-it-local)
  (yas-minor-mode -1)
  (set (make-local-variable 'ac-auto-start) nil)
  ))
  
  (setq appt-disp-window-function '(lambda (min-to-app new-time msg) (interactive)
  (shell-command (concat "notify-send -i /usr/share/icons/gnome/32x32/status/appointment-soon.png '" (format "Appointment in %s min" min-to-app) "' '" msg "'")))
  )
  ;; add state to the sorting strategy of todo
  (setcdr (assq 'todo org-agenda-sorting-strategy) '(todo-state-up priority-down category-keep))
  ;; define todo states: set time stamps one waiting, delegated and done
  (setq org-todo-keywords
  '((sequence
  "TODO(t)"
  "IN PROGRESS(p!)"
  "HOLD(h!)"
  "WAITING(w)"
  "SOMEDAY(s)"
  "|"
  "DONE(d!)"
  "CANCELLED(c)"
  )))
  (setq org-todo-keyword-faces
  '(
  ("IN PROGRESS" . 'warning)
  ("HOLD" . 'font-lock-keyword-face)
  ("WAITING" . 'font-lock-builtin-face)
  ("SOMEDAY" . 'font-lock-doc-face)
  ))
  ; publish octopress blog
  (setq org-html-validation-link nil)
  (setq org-publish-project-alist
  '(("emacs" .  (:base-directory "~/steckemacs"
  :base-extension "org"
  :publishing-directory "~/Dropbox/octopress/source/emacs/"
  :sub-superscript ""
  :recursive t
  :publishing-function org-html-publish-to-html
  :headline-levels 4
  :html-extension "markdown"
  :body-only t))
  ("clojure-static"
  :base-directory "~/Documents/Books/clojure-by-example/manuscript_org"
  :base-extension "png\\|jpg\\|jpeg"
  :publishing-directory "~/Documents/Books/clojure-by-example/manuscript"
  :recursive t
  :publishing-function org-publish-attachment)
  ("clojure-md" :base-directory "~/Documents/Books/clojure-by-example/manuscript_org"
  :base-extension "org"
  :publishing-directory "~/Documents/Books/clojure-by-example/manuscript"
  :sub-superscript ""
  :recursive t
  :publishing-function org-leanpub-publish-to-leanpub
  :html-extension "md"
  :body-only t)
  ("clojure-book" :components ("clojure-md" "clojure-static"))
  ))
  
#+END_SRC
  
  #+RESULTS:
  | emacs          | :base-directory | ~/steckemacs                                        | :base-extension | org  | :publishing-directory | ~/Dropbox/octopress/source/emacs/               | :sub-superscript      |                                                 | :recursive | t | :publishing-function | org-html-publish-to-html       | :headline-levels |  4 | :html-extension | markdown | :body-only | t |
  | clojure-static | :base-directory | ~/Documents/Books/clojure-by-example/manuscript_org | :base-extension | png\ | jpg\                  | jpeg                                            | :publishing-directory | ~/Documents/Books/clojure-by-example/manuscript | :recursive | t | :publishing-function | org-publish-attachment         |                  |    |                 |          |            |   |
  | clojure-md     | :base-directory | ~/Documents/Books/clojure-by-example/manuscript_org | :base-extension | org  | :publishing-directory | ~/Documents/Books/clojure-by-example/manuscript | :sub-superscript      |                                                 | :recursive | t | :publishing-function | org-leanpub-publish-to-leanpub | :html-extension  | md | :body-only      | t        |            |   |
  | clojure-book   | :components     | (clojure-md clojure-static)                         |                 |      |                       |                                                 |                       |                                                 |            |   |                      |                                |                  |    |                 |          |            |   |
  
** pallet
#+BEGIN_SRC emacs-lisp
(require 'pallet)
(pallet-mode t)
#+END_SRC

** sequential-command
#+BEGIN_SRC emacs-lisp
(require 'sequential-command)
(define-sequential-command seq-home
  back-to-indentation beginning-of-line seq-return)
(define-sequential-command seq-end
  end-of-line end-of-buffer seq-return)
(global-set-key "\C-a" 'seq-home)
  (global-set-key "\C-e" 'seq-end)
(define-sequential-command seq-company-tab company-complete-common company-complete-selection)

(define-key company-active-map (kbd "TAB") 'seq-company-tab)
(define-key company-active-map [tab] 'seq-company-tab)
#+END_SRC

#+RESULTS:
: seq-company-tab

** smartparens
#+BEGIN_SRC emacs-lisp
(require 'smartparens-config)
(smartparens-global-mode t)
;; highlights matching pairs
(show-smartparens-global-mode t)

#+END_SRC

#+RESULTS:
: t

** textmate
#+BEGIN_SRC emacs-lisp
  (textmate-mode 1)
         (define-key *textmate-mode-map* [(control return)] 'textmate-next-line)
         (define-key *textmate-mode-map* [(meta shift t)] 'textmate-clear-cache)
         (define-key *textmate-mode-map* [(meta \])] 'align)
         (define-key *textmate-mode-map* [(meta \[)] 'indent-according-to-mode)
         (define-key *textmate-mode-map* [(meta shift \])]  'textmate-shift-right)
         (define-key *textmate-mode-map* [(meta shift \[)] 'textmate-shift-left)
         (define-key *textmate-mode-map* [(meta /)] 'comment-or-uncomment-region-or-line)
         (define-key *textmate-mode-map* [(meta t)] 'textmate-goto-file)
         (define-key *textmate-mode-map* [(meta shift l)] 'textmate-select-line)
         (define-key *textmate-mode-map* [(meta up)] 'textmate-column-up)
         (define-key *textmate-mode-map* [(meta down)] 'textmate-column-down)
         (define-key *textmate-mode-map* [(meta shift up)] 'textmate-column-up-with-select)
         (define-key *textmate-mode-map* [(meta shift down)] 'textmate-column-down-with-select)
#+END_SRC

#+RESULTS:
: textmate-column-down-with-select

** Prompt Behavior

#+BEGIN_SRC emacs-lisp -n -r
  (defalias 'yes-or-no-p 'y-or-n-p)
  (setq kill-buffer-query-functions
        (remq 'process-kill-buffer-query-function
              kill-buffer-query-functions))
#+END_SRC

#+RESULTS:
| server-kill-buffer-query-function |

In [[(y-or-n)][line (y-or-n)]] all "yes" or "no" questions are aliased to "y" or "n". We don't really want to type a full word to answer a question from Emacs

Also Emacs should be able to kill processes without asking ([[(process-query)][line (process-query)]]). Got that snippet from: http://www.masteringemacs.org/articles/2010/11/14/disabling-prompts-emacs/
