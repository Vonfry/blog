<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:wfw="http://wellformedweb.org/CommentAPI/"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
     xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
     xmlns:georss="http://www.georss.org/georss"
     xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#"
     xmlns:media="http://search.yahoo.com/mrss/"><channel>
  <title>Jichao Ouyang's Blog</title>
  <atom:link href="http://blog.oyanglul.us/index.xml" rel="self" type="application/rss+xml" />
  <link>http://blog.oyanglul.us</link>
  <description><![CDATA[]]></description>
  <language>en</language>
  <pubDate>Fri, 06 Jan 2017 15:37:25 +0000</pubDate>
  <lastBuildDate>Fri, 06 Jan 2017 15:37:25 +0000</lastBuildDate>
  <generator>Emacs 24.5 Org-mode 8.3.6</generator>
  <webMaster>root@0f2e3a360dbe (root)</webMaster>
  <image>
    <url>http://orgmode.org/img/org-mode-unicorn-logo.png</url>
    <title>Jichao Ouyang's Blog</title>
    <link>http://blog.oyanglul.us</link>
  </image>


  <item>
    <title>2016 Year in Review</title>
    <link>http://blog.oyanglul.us/2016-year-in-review.html</link>
    <author>root@0f2e3a360dbe (root)</author>
    <guid isPermaLink="false">http://blog.oyanglul.us/2016-year-in-review.html</guid>
    <pubDate>Fri, 06 Jan 2017 00:00:00 +0000</pubDate>

    <description><![CDATA[<p>
    <i>Jan 06, 2017</i>
    </p>

    <div id="outline-container-orgheadline1" class="outline-3">
    <h3 id="orgheadline1"><a id="ID-80390fa0-ddad-4108-b619-21a6b245f3ec"></a>㊙</h3>
    <div class="outline-text-3" id="text-orgheadline1">
    <p>
    <img src="https://www.evernote.com/l/ABdR33DKHSVPkJu500j-cDnw4pdee1ZgiN8B/image.jpg" alt="image.jpg" />
    去年翻译完 ㊙ 这本小书，小书内容涵盖了比underscore炫技更多的函数式概念，例如Pattern Matching，Functor，Monad。说是小书，其实只是我的博客合集。
    开始在 gitbook 上，后来发现还是更习惯orgmode些，于是还是orgmode到我的博客上 <a href="http://blog.oyanglul.us/javascript/functional-javascript.html">http://blog.oyanglul.us/javascript/functional-javascript.html</a>
    </p>
    </div>
    </div>
    <div id="outline-container-orgheadline1" class="outline-3">
    <h3 id="orgheadline1"><a id="ID-7d62f7b3-0dd8-4a96-9cfc-dae148c93542"></a>㊙</h3>
    <div class="outline-text-3" id="text-orgheadline1">
    <p>
    <a href="http://blog.oyanglul.us/2016-year-in-review.html">Read More&#x2026;</a>
    </p>
    <hr  />
    </div>
    </div>
    ]]></description>
  </item>

  <item>
    <title>Functional Ruby</title>
    <link>http://blog.oyanglul.us/functional-ruby.html</link>
    <author>root@0f2e3a360dbe (root)</author>
    <guid isPermaLink="false">http://blog.oyanglul.us/functional-ruby.html</guid>
    <pubDate>Thu, 14 Jul 2016 00:00:00 +0000</pubDate>

    <description><![CDATA[<p>
    <i>Jul 14, 2016</i>
    </p>

    <p>
    话题已入选 ㊙, 没看懂的同学 <del>不服来战</del> 我们成都见 😉
    </p>
    <ul class="org-ul">
    <li>slides 👉 <a href="http://git.io/fprb">http://git.io/fprb</a></li>
    <li>cats.rb <a href="https://github.com/jcouyang/cats.rb">https://github.com/jcouyang/cats.rb</a></li>
    <li>hehe</li>
    </ul>
    <p>
    ㊙
    </p>


    <p>
    <a href="http://blog.oyanglul.us/functional-ruby.html">Read More...</a>
    </p>
    <hr  />
    ]]></description>
  </item>

  <item>
    <title>Implicit, to be or not to be</title>
    <link>http://blog.oyanglul.us/scala/implicit-conversions.html</link>
    <author>root@0f2e3a360dbe (root)</author>
    <guid isPermaLink="false">http://blog.oyanglul.us/scala/implicit-conversions.html</guid>
    <pubDate>Thu, 09 Jun 2016 00:00:00 +0000</pubDate>

    <description><![CDATA[<p>
    <i>Jun 09, 2016</i>
    </p>

    <div id="outline-container-orgheadline3" class="outline-3">
    <h3 id="orgheadline3"><a id="ID-614cd17f-1a88-4e3c-a9c0-b63e0a63c309"></a>隐式转换是什么鬼</h3>
    <div class="outline-text-3" id="text-orgheadline3">
    <p>
    有时候，一加一等于 11，比如 JavaScript
    </p>


    <p>
    <a href="http://blog.oyanglul.us/scala/implicit-conversions.html">Read More&#x2026;</a>
    </p>
    <hr  />
    </div>
    </div>
    ]]></description>
  </item>

  <item>
    <title>Rethinking React Dataflow</title>
    <link>http://blog.oyanglul.us/javascript/rethinking-react-dataflow.html</link>
    <author>root@0f2e3a360dbe (root)</author>
    <guid isPermaLink="false">http://blog.oyanglul.us/javascript/rethinking-react-dataflow.html</guid>
    <pubDate>Tue, 01 Mar 2016 00:00:00 +0000</pubDate>

    <description><![CDATA[<p>
    <i>Mar 01, 2016</i>
    </p>

    <p>
    所谓 redux，就是将动作(action) 变换成 state 转换函数(reducer)，然后放到一个统一的地方(store)来 setState 而已。
    Redux 现在红的一塌糊涂，写这篇文章并不是专门来踢馆的，因为已经㊙。
    我用过裸的 React，确实代码 scale 了会很难过，也用过 redux，predictable 不是吹的，但是这不该归功于 redux，而应该是纯函数，一个函数式编程顺带的最基本的好处。所以，撇开 redux 不聊，来看看除了纯函数，让我们来重新思考下函数式的其他一些奇技淫巧如何能帮助我们提升状态的可预测性。
    </p>
    <div id="outline-container-orgheadline5" class="outline-3">
    <h3 id="orgheadline5"><a id="ID-59136de0-e20c-4cbb-86ec-6ef6920320f5"></a>Reactive</h3>
    <div class="outline-text-3" id="text-orgheadline5">
    <p>
    相对于命令式的在各个地方 setState，setState 的顺序非常难确定， 就跟可变变量赋值一样，谁先谁后对结果影响巨大。这也是函数式要消灭的赋值。但是话说回来，我特么为什么要去推测状态呢？你永远无法列举完用户交互的操作顺序，即使可以也太头疼了。
    </p>


    <p>
    <a href="http://blog.oyanglul.us/javascript/rethinking-react-dataflow.html">Read More&#x2026;</a>
    </p>
    <hr  />
    </div>
    </div>
    ]]></description>
  </item>

  <item>
    <title>看我们3天 hackday 都干了些什么</title>
    <link>http://blog.oyanglul.us/javascript/react-transdux-the-clojure-approach-of-flux.html</link>
    <author>root@0f2e3a360dbe (root)</author>
    <guid isPermaLink="false">http://blog.oyanglul.us/javascript/react-transdux-the-clojure-approach-of-flux.html</guid>
    <pubDate>Sun, 22 Nov 2015 00:00:00 +0000</pubDate>

    <description><![CDATA[<p>
    <i>Nov 22, 2015</i>
    </p>

    <p>
    好不容易有3天属于 hacker 的日子， 从 idea 到产品，我们到底能做些什么？从 <b>痛点</b> 出发，最近的项目被 React 和 React Router 虐的不算轻，很大程度上因为我们是半路接手的。真的算是前人 <del>瓦🖖肯</del> 后人 <del>植树</del> 擦屁股。
    到底干了些什么呢？ 专业剧透 🐶 30年提示您请看 url 👆️ 并点这里 👉 ㊙
    </p>
    ]]></description>
  </item>
  <item>
    <title>A Compact React Cookbook</title>
    <link>http://blog.oyanglul.us/javascript/react-cookbook-mini.html</link>
    <author>root@0f2e3a360dbe (root)</author>
    <guid isPermaLink="false">http://blog.oyanglul.us/javascript/react-cookbook-mini.html</guid>
    <pubDate>Sun, 08 Nov 2015 00:00:00 +0000</pubDate>

    <description><![CDATA[<p>
    <i>Nov 08, 2015</i>
    </p>

    <p>
    这是一本非常 campact 的 React 煮书，收集了在实践 React 时的一些问题和解决方法。
    </p>
    <div id="outline-container-orgheadline8" class="outline-3">
    <h3 id="orgheadline8"><a id="ID-fd22e855-b517-4a25-b13c-3dedc75d2ca2"></a>Why not 2 way binding/为毛不用双向绑定</h3>
    <div class="outline-text-3" id="text-orgheadline8">
    <p>
    <a href="http://blog.oyanglul.us/javascript/react-cookbook-mini.html">Read More&#x2026;</a>
    </p>
    <hr  />
    </div>
    </div>
    ]]></description>
  </item>

  <item>
    <title>使用 dotfiles 和 stow 管理你的 dotfiles</title>
    <link>http://blog.oyanglul.us/github/using-dotfiles-and-stow-to-manage-your-dotfiles.html</link>
    <author>root@0f2e3a360dbe (root)</author>
    <guid isPermaLink="false">http://blog.oyanglul.us/github/using-dotfiles-and-stow-to-manage-your-dotfiles.html</guid>
    <pubDate>Thu, 29 Oct 2015 00:00:00 +0000</pubDate>

    <description><![CDATA[<p>
    <i>Oct 29, 2015</i>
    </p>

    <p>
    curl "<a href="https://raw.githubusercontent.com/jcouyang/dotfiles/master/README.org">https://raw.githubusercontent.com/jcouyang/dotfiles/master/README.org</a>"
    可能看标题你觉得我疯了，什么叫用 dotfiles 管理你的 dotfiles。
    第一个单词 ㊙ 指将 HOME 目录下的 <code>.XXX</code> (它们是真的字面意思dotfiles) 文件同步到 Github 上的方式。
    通常情况下，我们在开发过程中装的大部分工具，都会在 HOME 目录下创建一个以 <code>.</code> 开头的文件或目录，放置配置或者状态。
    因此我们希望的是用 github 版本管理这些 <b>配置</b> ，而不是 <b>状态</b> 。
    </p>


    <p>
    <a href="http://blog.oyanglul.us/github/using-dotfiles-and-stow-to-manage-your-dotfiles.html">Read More...</a>
    </p>
    <hr  />
    ]]></description>
  </item>

  <item>
    <title>Monadic Reactive Programming in JavaScript</title>
    <link>http://blog.oyanglul.us/javascript/reactive-programming.html</link>
    <author>root@0f2e3a360dbe (root)</author>
    <guid isPermaLink="false">http://blog.oyanglul.us/javascript/reactive-programming.html</guid>
    <pubDate>Tue, 29 Sep 2015 00:00:00 +0000</pubDate>

    <description><![CDATA[<p>
    <i>Sep 29, 2015</i>
    </p>

    <p>
    当我们都用习惯 Promise Monad 之后，我再来介绍一个跟时间相关的 Stream Monad，通过 Stream Monad，我们可以完成 Promise 或者是数组的奇淫巧计，而且符合所有 monad 的公理，于是我们叫它 Monadic Reactive Programming。
    ㊙
    </p>
    <div id="outline-container-orgheadline11" class="outline-4">
    <h4 id="orgheadline11"><a id="ID-36ca4190-518e-497e-873c-6d38a647e2aa"></a>Stream</h4>
    <div class="outline-text-4" id="text-orgheadline11">
    <p>
    如果说数组是空间维度，那么 Stream 则是时间维度版本的数组。比如我们有一个数组，需要 reduce 一下再打印出结果，是非常容易做到的：
    ㊙.reduce((acc,x)=&gt;acc+x)
    </p>


    <p>
    <a href="http://blog.oyanglul.us/javascript/reactive-programming.html">Read More&#x2026;</a>
    </p>
    <hr  />
    </div>
    </div>
    ]]></description>
  </item>

  <item>
    <title>入语言第二试: readtable 与 core.async</title>
    <link>http://blog.oyanglul.us/javascript/ru-lang-second-attampt.html</link>
    <author>root@0f2e3a360dbe (root)</author>
    <guid isPermaLink="false">http://blog.oyanglul.us/javascript/ru-lang-second-attampt.html</guid>
    <pubDate>Sun, 16 Aug 2015 00:00:00 +0000</pubDate>

    <description><![CDATA[<p>
    <i>Aug 16, 2015</i>
    </p>

    <p>
    俺的小公举淼淼最近各种 <del>发肚子拉烧</del> 发烧拉肚子，难得抽点时间给入语言ru-lang加入俩个大大的 features，忍不住要 marketing 一下。
    ㊙
    紧接㊙，在简单的介绍我是如何移植 clojure 的一些 macro 到 JavaScript 之后，我要介绍两个革命性的移植
    </p>
    <ul class="org-ul">
    <li>readtable</li>
    <li>core.async</li>
    </ul>


    <p>
    <a href="http://blog.oyanglul.us/javascript/ru-lang-second-attampt.html">Read More...</a>
    </p>
    <hr  />
    ]]></description>
  </item>

  <item>
    <title>理解JavaScript的原型链和继承</title>
    <link>http://blog.oyanglul.us/javascript/understand-prototype.html</link>
    <author>root@0f2e3a360dbe (root)</author>
    <guid isPermaLink="false">http://blog.oyanglul.us/javascript/understand-prototype.html</guid>
    <pubDate>Fri, 03 Jul 2015 00:00:00 +0000</pubDate>

    <description><![CDATA[<p>
    <i>Jul 03, 2015</i>
    </p>

    <div id="outline-container-orgheadline14" class="outline-3">
    <h3 id="orgheadline14"><a id="ID-f9173466-9733-47f5-8a17-427705efd45e"></a>instanceof 引发的问题</h3>
    <div class="outline-text-3" id="text-orgheadline14">
    <p>
    instanceof 运算符可以用来判断某个构造函数的prototype属性是否存在另外一个要检测对象的原型链上㊙。
    什么意思呢？
    来个题
    Function instanceof Object;
    </p>


    <p>
    <a href="http://blog.oyanglul.us/javascript/understand-prototype.html">Read More&#x2026;</a>
    </p>
    <hr  />
    </div>
    </div>
    ]]></description>
  </item>

  <item>
    <title>自制语言初试 - 入lang</title>
    <link>http://blog.oyanglul.us/javascript/clojure-essence-in-javascript-macro-2.html</link>
    <author>root@0f2e3a360dbe (root)</author>
    <guid isPermaLink="false">http://blog.oyanglul.us/javascript/clojure-essence-in-javascript-macro-2.html</guid>
    <pubDate>Mon, 22 Jun 2015 00:00:00 +0000</pubDate>

    <description><![CDATA[<p>
    <i>Jun 22, 2015</i>
    </p>

    <div id="outline-container-orgheadline17" class="outline-3">
    <h3 id="orgheadline17"><a id="ID-4613557c-0e08-45de-ab3e-a6bf42c1c6c7"></a>Rationale(为毛要整一门语言)</h3>
    <div class="outline-text-3" id="text-orgheadline17">
    <p>
    ㊙
    </p>
    </div>
    <div id="outline-container-orgheadline16" class="outline-4">
    <h4 id="orgheadline16"><a id="ID-b722ac84-8d30-484b-8b29-af2756698fa9"></a>ClojureScript怎么就不好了</h4>
    <div class="outline-text-4" id="text-orgheadline16">
    <p>
    接上篇简单的介绍sweet.js之后, 萌发了特别crazy的idea. 如果CoffeeScript或者LiveScript也算
    语言的话, 其实单单用sweet.js自制一堆macro就能实现类似的语言. 当然, 这两门语言都比较奇特, 一个
    </p>


    <p>
    <a href="http://blog.oyanglul.us/javascript/clojure-essence-in-javascript-macro-2.html">Read More&#x2026;</a>
    </p>
    <hr  />
    </div>
    </div>
    </div>
    ]]></description>
  </item>

  <item>
    <title>JavaScript玩转Clojure大法之 - Macro (1)</title>
    <link>http://blog.oyanglul.us/javascript/clojure-essence-in-javascript-macro.html</link>
    <author>root@0f2e3a360dbe (root)</author>
    <guid isPermaLink="false">http://blog.oyanglul.us/javascript/clojure-essence-in-javascript-macro.html</guid>
    <pubDate>Sun, 14 Jun 2015 00:00:00 +0000</pubDate>

    <description><![CDATA[<p>
    <i>Jun 14, 2015</i>
    </p>

    <ul class="org-ul">
    <li>㊙</li>
    <li>㊙</li>
    <li>㊙</li>
    <li><b>JavaScript玩转Clojure大法之 - Macro (1)</b></li>
    </ul>
    <p>
    macro可以说是lisp语言的独门绝技, lisp语言数据即代码,以及s-expression的特点使得可以轻松自定义macro.
    </p>


    <p>
    <a href="http://blog.oyanglul.us/javascript/clojure-essence-in-javascript-macro.html">Read More...</a>
    </p>
    <hr  />
    ]]></description>
  </item>

  <item>
    <title>JavaScript玩转Clojure大法之 - Trampoline</title>
    <link>http://blog.oyanglul.us/javascript/clojure-essence-in-javascript-trampoline.html</link>
    <author>root@0f2e3a360dbe (root)</author>
    <guid isPermaLink="false">http://blog.oyanglul.us/javascript/clojure-essence-in-javascript-trampoline.html</guid>
    <pubDate>Sat, 30 May 2015 00:00:00 +0000</pubDate>

    <description><![CDATA[<p>
    <i>May 30, 2015</i>
    </p>

    <ul class="org-ul">
    <li>㊙</li>
    <li>㊙</li>
    <li><b>㊙</b></li>
    <li>㊙</li>
    </ul>
    <p>
    在函数式编程中, 递归可以说是最关健甚至唯一的循环手段
    </p>


    <p>
    <a href="http://blog.oyanglul.us/javascript/clojure-essence-in-javascript-trampoline.html">Read More...</a>
    </p>
    <hr  />
    ]]></description>
  </item>

  <item>
    <title>JavaScript玩转Clojure大法之Transducer</title>
    <link>http://blog.oyanglul.us/javascript/clojure-essence-in-javascript-transducer.html</link>
    <author>root@0f2e3a360dbe (root)</author>
    <guid isPermaLink="false">http://blog.oyanglul.us/javascript/clojure-essence-in-javascript-transducer.html</guid>
    <pubDate>Sat, 16 May 2015 00:00:00 +0000</pubDate>

    <description><![CDATA[<p>
    <i>May 16, 2015</i>
    </p>

    <ul class="org-ul">
    <li>㊙</li>
    <li><b>㊙</b></li>
    <li>㊙</li>
    <li>㊙</li>
    </ul>
    <p>
    通过上一篇㊙介绍了如何用JavaScript享受到Clojure在并发编程的优势. 我决定
    </p>


    <p>
    <a href="http://blog.oyanglul.us/javascript/clojure-essence-in-javascript-transducer.html">Read More...</a>
    </p>
    <hr  />
    ]]></description>
  </item>

  <item>
    <title>Functional JavaScript Mini Book</title>
    <link>http://blog.oyanglul.us/javascript/functional-javascript.html</link>
    <author>root@0f2e3a360dbe (root)</author>
    <guid isPermaLink="false">http://blog.oyanglul.us/javascript/functional-javascript.html</guid>
    <pubDate>Wed, 13 May 2015 00:00:00 +0000</pubDate>

    <description><![CDATA[<p>
    <i>May 13, 2015</i>
    </p>

    <p>
    ⚠ DEPRETICATED ⚠
    本书已 <del>过时</del> 停更，请转到新书 
    👉 ㊙ 👈
    当然，你依然可以请㊙ ☕
    ㊙
    </p>


    <p>
    <a href="http://blog.oyanglul.us/javascript/functional-javascript.html">Read More...</a>
    </p>
    <hr  />
    ]]></description>
  </item>

  <item>
    <title>Literal Programming Emacs Configure</title>
    <link>http://blog.oyanglul.us/emacs/literal-programming-emacs-config.html</link>
    <author>root@0f2e3a360dbe (root)</author>
    <guid isPermaLink="false">http://blog.oyanglul.us/emacs/literal-programming-emacs-config.html</guid>
    <pubDate>Fri, 08 May 2015 00:00:00 +0000</pubDate>

    <description><![CDATA[<p>
    <i>May 08, 2015</i>
    </p>



    <p>
    <a href="http://blog.oyanglul.us/emacs/literal-programming-emacs-config.html">Read More...</a>
    </p>
    <hr  />
    ]]></description>
  </item>

  <item>
    <title>Clojure 风格的 JavaScript 并发编程</title>
    <link>http://blog.oyanglul.us/javascript/clojure-core.async-essence-in-native-javascript.html</link>
    <author>root@0f2e3a360dbe (root)</author>
    <guid isPermaLink="false">http://blog.oyanglul.us/javascript/clojure-core.async-essence-in-native-javascript.html</guid>
    <pubDate>Tue, 28 Apr 2015 00:00:00 +0000</pubDate>

    <description><![CDATA[<p>
    <i>Apr 28, 2015</i>
  </p>

  <ul class="org-ul">
    <li><b>㊙</b></li>
    <li>㊙</li>
    <li>㊙</li>
    <li>㊙</li>
  </ul>
  <p>
    在看到第一行JavaScript代码之前，我要啰嗦一下为什么要用 clojure core.async 的异步风格。
  </p>


  <p>
    <a href="http://blog.oyanglul.us/javascript/clojure-core.async-essence-in-native-javascript.html">Read More...</a>
  </p>
  <hr  />
    ]]></description>
  </item>

  <item>
    <title>Essential EcmaScript 6</title>
    <link>http://blog.oyanglul.us/javascript/essential-ecmascript6.html</link>
    <author>root@0f2e3a360dbe (root)</author>
    <guid isPermaLink="false">http://blog.oyanglul.us/javascript/essential-ecmascript6.html</guid>
    <pubDate>Fri, 20 Mar 2015 00:00:00 +0000</pubDate>

    <description><![CDATA[<p>
    <i>Mar 20, 2015</i>
    </p>

    <p>
    新的草案㊙
    (虽然说是草案,但你可以看到 Firefox 其实已经实现大部分的
    feature)离我们越来越近了, 而且我们已经可以通过 ㊙ 在项目中使用这些新的features. 是时候让我们
    重新认识一下 JavaScript 了. 下面列出了一部分比较让人兴奋和期待的features. 剧透一下我最激动的还是㊙
    </p>
    <div id="outline-container-orgheadline25" class="outline-3">
    <h3 id="orgheadline25"><a id="ID-b99fdd63-3cd4-4392-ad8f-e83d63386034"></a>Arrow Function</h3>
    <div class="outline-text-3" id="text-orgheadline25">
    <p>
    <a href="http://blog.oyanglul.us/javascript/essential-ecmascript6.html">Read More&#x2026;</a>
    </p>
    <hr  />
    </div>
    </div>
    ]]></description>
  </item>

  <item>
    <title>Clojure The Mini Book</title>
    <link>http://blog.oyanglul.us/clojure/clojure-the-mini-book.html</link>
    <author>root@0f2e3a360dbe (root)</author>
    <guid isPermaLink="false">http://blog.oyanglul.us/clojure/clojure-the-mini-book.html</guid>
    <pubDate>Thu, 26 Feb 2015 00:00:00 +0000</pubDate>

    <description><![CDATA[<p>
    <i>Feb 26, 2015</i>
    </p>

    <p>
    ;; please using cider version of ob-clojure 
    (require 'ob-clojure)
    (require 'ob-js)
    (setq org-babel-clojure-backend 'cider)
    </p>
    <pre class="example">
    cider
    </pre>


    <p>
    <a href="http://blog.oyanglul.us/clojure/clojure-the-mini-book.html">Read More...</a>
    </p>
    <hr  />
    ]]></description>
  </item>

  <item>
    <title>make Bamboo support Github Pull Request with Status API</title>
    <link>http://blog.oyanglul.us/make Bamboo support Github Pull Request with Status API.html</link>
    <author>root@0f2e3a360dbe (root)</author>
    <guid isPermaLink="false">http://blog.oyanglul.us/make Bamboo support Github Pull Request with Status API.html</guid>
    <pubDate>Wed, 18 Feb 2015 00:00:00 +0000</pubDate>

    <description><![CDATA[<p>
    <i>Feb 18, 2015</i>
    </p>

    <div id="outline-container-orgheadline28" class="outline-3">
    <h3 id="orgheadline28"><a id="ID-951eadfe-07b5-45ff-8f05-89665c623b1d"></a>what's wrong with Bamboo</h3>
    <div class="outline-text-3" id="text-orgheadline28">
    <p>
    if you used <i>travis-ci</i> on github, you may familiar with this thing when sending pull request
    ㊙
    those green things came from github status api.
    but <i>bamboo</i> does not come with native support for github status api
    </p>


    <p>
    <a href="http://blog.oyanglul.us/make Bamboo support Github Pull Request with Status API.html">Read More&#x2026;</a>
    </p>
    <hr  />
    </div>
    </div>
    ]]></description>
  </item>

  <item>
    <title>About Me</title>
    <link>http://blog.oyanglul.us/jichao.ouyang.html</link>
    <author>root@0f2e3a360dbe (root)</author>
    <guid isPermaLink="false">http://blog.oyanglul.us/jichao.ouyang.html</guid>
    <pubDate>Sat, 01 Feb 1986 00:00:00 +0000</pubDate>

    <description><![CDATA[<p>
    <i>Feb 01, 1986</i>
    </p>

    <p>
    不会 Haskell 的 Scala 程序员写不出好的 JavaScript
    Hi, I'm programmer who program <code>JavaScript</code>, <code>Ruby</code>, sometime even <code>Scala</code> for living, meanwhile also play <code>Clojure/Script</code>, <code>Haskell</code> and my own language <code>rù</code> for <b>fun</b>.
    If you want to find/ping me, I'm always available on
    </p>
    <div id="outline-container-orgheadline30" class="outline-3">
    <h3 id="orgheadline30"><a id="ID-01002979-daf6-47a6-a27c-fcd0cd0e1161"></a>Projects</h3>
    <div class="outline-text-3" id="text-orgheadline30">
    </div>
    </div>
    <div id="outline-container-orgheadline31" class="outline-3">
    <h3 id="orgheadline31"><a id="ID-2a523b12-3a0b-4112-9f13-196bb533d388"></a>Books</h3>
    <div class="outline-text-3" id="text-orgheadline31">
    <p>
    <a href="http://blog.oyanglul.us/jichao.ouyang.html">Read More&#x2026;</a>
    </p>
    <hr  />
    </div>
    </div>
    ]]></description>
  </item>
</channel>
</rss>
