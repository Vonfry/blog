<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:wfw="http://wellformedweb.org/CommentAPI/"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
     xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
     xmlns:georss="http://www.georss.org/georss"
     xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#"
     xmlns:media="http://search.yahoo.com/mrss/"><channel>
  <title>Jichao Ouyang's Blog</title>
  <atom:link href="http://blog.oyanglul.us/index.xml" rel="self" type="application/rss+xml" />
  <link>http://blog.oyanglul.us</link>
  <description><![CDATA[]]></description>
  <language>en</language>
  <pubDate>Mon, 27 Nov 2017 02:06:06 +0000</pubDate>
  <lastBuildDate>Mon, 27 Nov 2017 02:06:06 +0000</lastBuildDate>
  <generator>Emacs 24.5 Org-mode 8.3.6</generator>
  <webMaster>root@1eb61f6030c8 (Jichao Ouyang)</webMaster>
  <image>
    <url>http://orgmode.org/img/org-mode-unicorn-logo.png</url>
    <title>Jichao Ouyang's Blog</title>
    <link>http://blog.oyanglul.us</link>
  </image>


  <item>
    <title>Continuous Delivery</title>
    <link>http://blog.oyanglul.us/slides/continuous-delivery.html</link>
    <author>root@1eb61f6030c8 (Jichao Ouyang)</author>
    <guid isPermaLink="false">http://blog.oyanglul.us/slides/continuous-delivery.html</guid>
    <pubDate>Mon, 27 Nov 2017 00:00:00 +0000</pubDate>

    <description><![CDATA[<p>
    <i>Nov 27, 2017</i>
    </p>

    <div id="outline-container-orgheadline1" class="outline-3">
    <h3 id="orgheadline1"><a id="ID-f2d6f064-3670-4c52-bd6c-30aad46ef6bd"></a>What is Continuous Delivery</h3>
    <div class="outline-text-3" id="text-orgheadline1">
    <p>
    /Continuous Delivery/㊙ is the <b>ability</b> to get changes of all types including new <b>features</b>, configuration <b>changes</b>, bug <b>fixes</b> and <b>experiments</b> into PRODUCTION, or into the hands of users, <b>safely</b> and <b>quickly</b> in a <b>sustainable</b> way.
    </p>
    </div>
    </div>
    <div id="outline-container-orgheadline1" class="outline-3">
    <h3 id="orgheadline1"><a id="ID-018e681e-41f3-47b6-b021-bde06242a190"></a>What is Continuous Integration</h3>
    <div class="outline-text-3" id="text-orgheadline1">
    <p>
    /Continuous Integration/㊙ is a software development <b>practice</b> where members of a team <b>integrate</b> their work <b>frequently</b>, usually each person integrates at least daily - leading to multiple integrations per day. Each integration is <b>verified</b> by an <b>automated build</b> (including test) to <b>detect</b> integration <b>errors</b> as <b>quickly</b> as possible.
    </p>
    </div>
    </div>
    <div id="outline-container-orgheadline1" class="outline-3">
    <h3 id="orgheadline1"><a id="ID-4a8b0f24-0deb-4e6c-99c5-2e8bc3ab84f5"></a>Why Continuous Delivery</h3>
    <div class="outline-text-3" id="text-orgheadline1">
    <p>
    <a href="http://blog.oyanglul.us/slides/continuous-delivery.html">Read More&#x2026;</a>
    </p>
    <hr  />
    </div>
    </div>
    ]]></description>
  </item>

  <item>
    <title>xReact Fantasy</title>
    <link>http://blog.oyanglul.us/xreact/fun-with-fantasy.html</link>
    <author>root@1eb61f6030c8 (Jichao Ouyang)</author>
    <guid isPermaLink="false">http://blog.oyanglul.us/xreact/fun-with-fantasy.html</guid>
    <pubDate>Sat, 09 Sep 2017 00:00:00 +0000</pubDate>

    <description><![CDATA[<p>
    <i>Sep 09, 2017</i>
    </p>

    <p>
    (require 'ob-shell)
    mkdir -p src/transforms src/components src/views
    xReact 从 2.3 版本之后多了一种模式, 纯函数式的 FantasyX. 大概思想是把所有的逻辑和操作写到普通函数,然后 lift 到 FantasyX, 之后就可以轻松完成各种 map, concat 之类的转换和组合, 形成新的 FantasyX.
    如果听起来太奇怪, 让我们来看一个不是那么简单的 Counter 计数器实现.
    </p>
    <div id="outline-container-orgheadline2" class="outline-3">
    <h3 id="orgheadline2"><a id="ID-38e22927-778d-4812-bd52-fdce10608672"></a>Counter 例子</h3>
    <div class="outline-text-3" id="text-orgheadline2">
    <p>
    <a href="http://blog.oyanglul.us/xreact/fun-with-fantasy.html">Read More&#x2026;</a>
    </p>
    <hr  />
    </div>
    </div>
    ]]></description>
  </item>

  <item>
    <title>Type Classes in TypeScript</title>
    <link>http://blog.oyanglul.us/xreact/typeclasses-in-typescript.html</link>
    <author>root@1eb61f6030c8 (Jichao Ouyang)</author>
    <guid isPermaLink="false">http://blog.oyanglul.us/xreact/typeclasses-in-typescript.html</guid>
    <pubDate>Sat, 09 Sep 2017 00:00:00 +0000</pubDate>

    <description><![CDATA[<p>
    <i>Sep 09, 2017</i>
    </p>

    <p>
    Typeclass 可以想象为函数式编程的一种设计模式, 虽然并没有设计模式这一说. 在 Haskell 是非常烂大街的一个概念.
    在面向对象中, 我们对数据结构的表示为一个包含数据的 Class, 然后在这个 Class 里定义对数据的操作.
    但是函数式不是这样的, 数据的定义与其操作的定义是完全分开的.
    这就导致了 Type Class 的概念, 就像 Class 一样,我们需要给一些特定的操作归类, 按照可操作的类型.
    例如现在有个数据类型 <code>Xstream</code>
    </p>


    <p>
    <a href="http://blog.oyanglul.us/xreact/typeclasses-in-typescript.html">Read More...</a>
    </p>
    <hr  />
    ]]></description>
  </item>

  <item>
    <title>Flux is Dead, Long Live FP</title>
    <link>http://blog.oyanglul.us/xreact/flux-is-dead-long-live-functional-programming.html</link>
    <author>root@1eb61f6030c8 (Jichao Ouyang)</author>
    <guid isPermaLink="false">http://blog.oyanglul.us/xreact/flux-is-dead-long-live-functional-programming.html</guid>
    <pubDate>Sat, 09 Sep 2017 00:00:00 +0000</pubDate>

    <description><![CDATA[<p>
    <i>Sep 09, 2017</i>
    </p>

    <p>
    看看用最流行的flux框架 -- redux ㊙ 是有多费劲. 当然我并没有说 redux 不好用 <del>是一点也不好用</del> 其实如果你喜欢低级别的抽象, 写一些 verbose 的代码, 是没有什么错的. 但是, 明明可以进行更 <del>搞基</del> 高级别的华丽抽象, 我们为什么要浪费生命写那么 verbose 的代码.
    要问什么是verbose, 你看 ㊙
    这些槽可以吐好几年, 但是, 比起吐槽, 更重要的节约你的生命, 更快的开发出有可读, 可推理, 可测, 可扩展的代码.
    同样是 todomvc, 让我们看看函数式都是怎么抽象的.
    一个 todo, 有六种操作, 无需定义action这个框架模板代码, 先不要想怎build UI 组件, 如果让你写六个函数, 是不是分分钟的事情, 但是既然我们要聊 FP, 不如看看用 lens 是否能写出更简单而且健壮的代码:
    </p>


    <p>
    <a href="http://blog.oyanglul.us/xreact/flux-is-dead-long-live-functional-programming.html">Read More...</a>
    </p>
    <hr  />
    ]]></description>
  </item>

  <item>
    <title>为毛需要声明式 / Declarative vs Imperative in React</title>
    <link>http://blog.oyanglul.us/javascript/declarative-vs-imperative-in-react.html</link>
    <author>root@1eb61f6030c8 (Jichao Ouyang)</author>
    <guid isPermaLink="false">http://blog.oyanglul.us/javascript/declarative-vs-imperative-in-react.html</guid>
    <pubDate>Sun, 07 May 2017 00:00:00 +0000</pubDate>

    <description><![CDATA[<p>
    <i>May 07, 2017</i>
    </p>

    <div id="outline-container-orgheadline6" class="outline-3">
    <h3 id="orgheadline6"><a id="ID-944deef9-3580-42a4-ae01-6620923eaced"></a>命令式大家都很懂</h3>
    <div class="outline-text-3" id="text-orgheadline6">
    <p>
    我就不讲了&#x2026;
    </p>
    </div>
    </div>
    <div id="outline-container-orgheadline7" class="outline-3">
    <h3 id="orgheadline7"><a id="ID-17abb495-1f76-4b0e-903e-26b51af9a9f8"></a>声明式</h3>
    <div class="outline-text-3" id="text-orgheadline7">
    <p>
    我能想到的最好的比喻就是点餐
    <img src="https://media.giphy.com/media/3orif4xzApfAWWlcre/giphy.gif" alt="giphy.gif" />
    </p>


    <p>
    <a href="http://blog.oyanglul.us/javascript/declarative-vs-imperative-in-react.html">Read More&#x2026;</a>
    </p>
    <hr  />
    </div>
    </div>
    ]]></description>
  </item>

  <item>
    <title>范畴论完全装逼手册(二) / Grokking Monad</title>
    <link>http://blog.oyanglul.us/grokking-monad/part2.html</link>
    <author>root@1eb61f6030c8 (Jichao Ouyang)</author>
    <guid isPermaLink="false">http://blog.oyanglul.us/grokking-monad/part2.html</guid>
    <pubDate>Fri, 10 Feb 2017 00:00:00 +0000</pubDate>

    <description><![CDATA[<p>
    <i>Feb 10, 2017</i>
    </p>

    <ul class="org-ul">
    <li>㊙</li>
    <li><b>㊙</b> 👈</li>
    <li>㊙</li>
    </ul>
    <p>
    第一部分理论部分都讲完了， 如果你读到这里还没有被这些吊炸天的概念搞daze，接下来可以看看它到底跟我们编程有鸟关系呢？
    第二部分将介绍由这些概念产生的一些实用的monad instances，这些 monad 都通过同样的抽象方式，解决了分离计算与副作用的工作。
    </p>


    <p>
    <a href="http://blog.oyanglul.us/grokking-monad/part2.html">Read More...</a>
    </p>
    <hr  />
    ]]></description>
  </item>

  <item>
    <title>范畴论完全装逼手册(三) / Grokking Monad</title>
    <link>http://blog.oyanglul.us/grokking-monad/part3.html</link>
    <author>root@1eb61f6030c8 (Jichao Ouyang)</author>
    <guid isPermaLink="false">http://blog.oyanglul.us/grokking-monad/part3.html</guid>
    <pubDate>Fri, 10 Feb 2017 00:00:00 +0000</pubDate>

    <description><![CDATA[<p>
    <i>Feb 10, 2017</i>
    </p>

    <ul class="org-ul">
    <li>㊙</li>
    <li>㊙</li>
    <li><b>㊙</b> 👈</li>
    </ul>
    <p>
    第二部分介绍了一些实用的monad instances，这些 monad 都通过同样的抽象方式，解决了分离计算与副作用的工作。
    通过它们可以解决大多数的基本问题，但是正对于复杂业务逻辑，我们可能还需要一些更高阶的 monad 或者 pattern。
    </p>


    <p>
    <a href="http://blog.oyanglul.us/grokking-monad/part3.html">Read More...</a>
    </p>
    <hr  />
    ]]></description>
  </item>

  <item>
    <title>范畴论完全装逼手册(一) / Grokking Monad</title>
    <link>http://blog.oyanglul.us/grokking-monad/part1.html</link>
    <author>root@1eb61f6030c8 (Jichao Ouyang)</author>
    <guid isPermaLink="false">http://blog.oyanglul.us/grokking-monad/part1.html</guid>
    <pubDate>Fri, 10 Feb 2017 00:00:00 +0000</pubDate>

    <description><![CDATA[<p>
    <i>Feb 10, 2017</i>
    </p>

    <ul class="org-ul">
    <li><b>㊙</b> 👈</li>
    <li>㊙</li>
    <li>㊙</li>
    </ul>
    <p>
    很多人都不明白什么是Monad，并不是因为不会用，不知觉可能就在用某种 monad。<br  />
    定义和使用起来其实不难，困惑的大多应该是后面的这堆理论-- 范畴论。当然，我也没学过范畴论，只是略微看得懂写Haskell罢了。
    </p>


    <p>
    <a href="http://blog.oyanglul.us/grokking-monad/part1.html">Read More...</a>
    </p>
    <hr  />
    ]]></description>
  </item>

  <item>
    <title>范畴论完全装逼手册 / Grokking Monad</title>
    <link>http://blog.oyanglul.us/grokking-monad/index.html</link>
    <author>root@1eb61f6030c8 (Jichao Ouyang)</author>
    <guid isPermaLink="false">http://blog.oyanglul.us/grokking-monad/index.html</guid>
    <pubDate>Fri, 10 Feb 2017 00:00:00 +0000</pubDate>

    <description><![CDATA[<p>
    <i>Feb 10, 2017</i>
    </p>

    <p>
    FBI Warning
    👇PDF，kindle， epub格式的书现已开放购买...
    购买链接是 gumroad，需要科学上网才能点开，如果你不能科学上网，就不要买了（当然也没法买），把这六块钱投资到科学上网上吧。
    👇免费在线阅读
    </p>
    <ul class="org-ul">
    <li>㊙</li>
    </ul>


    <p>
    <a href="http://blog.oyanglul.us/grokking-monad/index.html">Read More...</a>
    </p>
    <hr  />
    ]]></description>
  </item>

  <item>
    <title>What The F🖕ck? BAIDU YOUR SISTER</title>
    <link>http://blog.oyanglul.us/what-the-fuuuuuuuuuuuuuck-baidu.html</link>
    <author>root@1eb61f6030c8 (Jichao Ouyang)</author>
    <guid isPermaLink="false">http://blog.oyanglul.us/what-the-fuuuuuuuuuuuuuck-baidu.html</guid>
    <pubDate>Sun, 15 Jan 2017 00:00:00 +0000</pubDate>

    <description><![CDATA[<p>
    <i>Jan 15, 2017</i>
    </p>

    <p>
    <img src="https://www.evernote.com/l/ABetTPigiY1DhJPaUIYxsafyjUIGhM9J13AB/image.png" alt="image.png" />
    <img src="https://www.evernote.com/l/ABdmyFzNI9tDTpQUDnarRocerOMvoeDT5HkB/image.png" alt="image.png" />
    <img src="https://www.evernote.com/l/ABc_O0Twe0ZMW7goOiG82nxAVTXis6AaKSgB/image.png" alt="image.png" />
    不知道那里惹了百度了，反正惹都惹了，反正百度也索引不了我，我只想说
    ㊙
    </p>


    <p>
    <a href="http://blog.oyanglul.us/what-the-fuuuuuuuuuuuuuck-baidu.html">Read More...</a>
    </p>
    <hr  />
    ]]></description>
  </item>

  <item>
    <title>2016 Year in Review</title>
    <link>http://blog.oyanglul.us/2016-year-in-review.html</link>
    <author>root@1eb61f6030c8 (Jichao Ouyang)</author>
    <guid isPermaLink="false">http://blog.oyanglul.us/2016-year-in-review.html</guid>
    <pubDate>Sat, 24 Dec 2016 00:00:00 +0000</pubDate>

    <description><![CDATA[<p>
    <i>Dec 24, 2016</i>
    </p>

    <div id="outline-container-orgheadline14" class="outline-3">
    <h3 id="orgheadline14"><a id="ID-3d472278-655f-4364-809a-5036244c9b2f"></a>㊙</h3>
    <div class="outline-text-3" id="text-orgheadline14">
    <p>
    <img src="https://www.evernote.com/l/ABdR33DKHSVPkJu500j-cDnw4pdee1ZgiN8B/image.jpg" alt="image.jpg" />
    去年翻译完 ㊙ 这本小书，小书内容涵盖了比underscore炫技更多的函数式概念，例如Pattern Matching，Functor，Monad。说是小书，其实只是我的博客合集。
    开始在 gitbook 上，后来发现还是更习惯orgmode些，于是还是orgmode到我的博客上 <a href="http://blog.oyanglul.us/javascript/functional-javascript.html">http://blog.oyanglul.us/javascript/functional-javascript.html</a>
    </p>
    </div>
    </div>
    <div id="outline-container-orgheadline15" class="outline-3">
    <h3 id="orgheadline15"><a id="ID-10aa8cbc-4cc2-476c-98e4-b8ea44bcf12c"></a>㊙</h3>
    <div class="outline-text-3" id="text-orgheadline15">
    <p>
    <a href="http://blog.oyanglul.us/2016-year-in-review.html">Read More&#x2026;</a>
    </p>
    <hr  />
    </div>
    </div>
    ]]></description>
  </item>

  <item>
    <title>用Haskell48小时写你个Scheme</title>
    <link>http://blog.oyanglul.us/write-yourself-a-scheme-in-haskell/index.html</link>
    <author>root@1eb61f6030c8 (Jichao Ouyang)</author>
    <guid isPermaLink="false">http://blog.oyanglul.us/write-yourself-a-scheme-in-haskell/index.html</guid>
    <pubDate>Fri, 16 Sep 2016 00:00:00 +0000</pubDate>

    <description><![CDATA[<p>
    <i>Sep 16, 2016</i>
    </p>

    <div id="outline-container-orgheadline17" class="outline-3">
    <h3 id="orgheadline17"><a id="ID-0712d719-f4d9-4b94-9ce9-c57fdfd82cb5"></a>前言</h3>
    <div class="outline-text-3" id="text-orgheadline17">
    <p>
    ㊙
    你可以当这是 ㊙ 的笔记，但并不是中文版。所以只是按我的理解来解释，如果有看不懂或者描述有误欢迎留言或者Pull Request。
    </p>


    <p>
    <a href="http://blog.oyanglul.us/write-yourself-a-scheme-in-haskell/index.html">Read More&#x2026;</a>
    </p>
    <hr  />
    </div>
    </div>
    ]]></description>
  </item>

  <item>
    <title>Functional Ruby</title>
    <link>http://blog.oyanglul.us/functional-ruby.html</link>
    <author>root@1eb61f6030c8 (Jichao Ouyang)</author>
    <guid isPermaLink="false">http://blog.oyanglul.us/functional-ruby.html</guid>
    <pubDate>Thu, 14 Jul 2016 00:00:00 +0000</pubDate>

    <description><![CDATA[<p>
    <i>Jul 14, 2016</i>
    </p>

    <p>
    话题已入选 ㊙, 没看懂的同学 <del>不服来战</del> 我们成都见 😉
    </p>
    <ul class="org-ul">
    <li>slides 👉 <a href="http://git.io/fprb">http://git.io/fprb</a></li>
    <li>cats.rb <a href="https://github.com/jcouyang/cats.rb">https://github.com/jcouyang/cats.rb</a></li>
    <li>hehe</li>
    </ul>
    <p>
    ㊙
    </p>


    <p>
    <a href="http://blog.oyanglul.us/functional-ruby.html">Read More...</a>
    </p>
    <hr  />
    ]]></description>
  </item>

  <item>
    <title>Implicit, to be or not to be</title>
    <link>http://blog.oyanglul.us/scala/implicit-conversions.html</link>
    <author>root@1eb61f6030c8 (Jichao Ouyang)</author>
    <guid isPermaLink="false">http://blog.oyanglul.us/scala/implicit-conversions.html</guid>
    <pubDate>Thu, 09 Jun 2016 00:00:00 +0000</pubDate>

    <description><![CDATA[<p>
    <i>Jun 09, 2016</i>
    </p>

    <div id="outline-container-orgheadline20" class="outline-3">
    <h3 id="orgheadline20"><a id="ID-92a76f73-ad95-4ee2-a874-02e427775c79"></a>隐式转换是什么鬼</h3>
    <div class="outline-text-3" id="text-orgheadline20">
    <p>
    有时候，一加一等于 11，比如 JavaScript
    </p>


    <p>
    <a href="http://blog.oyanglul.us/scala/implicit-conversions.html">Read More&#x2026;</a>
    </p>
    <hr  />
    </div>
    </div>
    ]]></description>
  </item>

  <item>
    <title>Rethinking React Dataflow</title>
    <link>http://blog.oyanglul.us/javascript/rethinking-react-dataflow.html</link>
    <author>root@1eb61f6030c8 (Jichao Ouyang)</author>
    <guid isPermaLink="false">http://blog.oyanglul.us/javascript/rethinking-react-dataflow.html</guid>
    <pubDate>Tue, 01 Mar 2016 00:00:00 +0000</pubDate>

    <description><![CDATA[<p>
    <i>Mar 01, 2016</i>
    </p>

    <p>
    所谓 redux，就是将动作(action) 变换成 state 转换函数(reducer)，然后放到一个统一的地方(store)来 setState 而已。
    Redux 现在红的一塌糊涂，写这篇文章并不是专门来踢馆的，因为已经㊙。
    我用过裸的 React，确实代码 scale 了会很难过，也用过 redux，predictable 不是吹的，但是这不该归功于 redux，而应该是纯函数，一个函数式编程顺带的最基本的好处。所以，撇开 redux 不聊，来看看除了纯函数，让我们来重新思考下函数式的其他一些奇技淫巧如何能帮助我们提升状态的可预测性。
    </p>
    <div id="outline-container-orgheadline22" class="outline-3">
    <h3 id="orgheadline22"><a id="ID-0e876042-c08d-420f-bb10-9350f5ab6b77"></a>Reactive</h3>
    <div class="outline-text-3" id="text-orgheadline22">
    <p>
    相对于命令式的在各个地方 setState，setState 的顺序非常难确定， 就跟可变变量赋值一样，谁先谁后对结果影响巨大。这也是函数式要消灭的赋值。但是话说回来，我特么为什么要去推测状态呢？你永远无法列举完用户交互的操作顺序，即使可以也太头疼了。
    </p>


    <p>
    <a href="http://blog.oyanglul.us/javascript/rethinking-react-dataflow.html">Read More&#x2026;</a>
    </p>
    <hr  />
    </div>
    </div>
    ]]></description>
  </item>

  <item>
    <title>看我们3天 hackday 都干了些什么</title>
    <link>http://blog.oyanglul.us/javascript/react-transdux-the-clojure-approach-of-flux.html</link>
    <author>root@1eb61f6030c8 (Jichao Ouyang)</author>
    <guid isPermaLink="false">http://blog.oyanglul.us/javascript/react-transdux-the-clojure-approach-of-flux.html</guid>
    <pubDate>Sun, 22 Nov 2015 00:00:00 +0000</pubDate>

    <description><![CDATA[<p>
    <i>Nov 22, 2015</i>
    </p>

    <p>
    好不容易有3天属于 hacker 的日子， 从 idea 到产品，我们到底能做些什么？从 <b>痛点</b> 出发，最近的项目被 React 和 React Router 虐的不算轻，很大程度上因为我们是半路接手的。真的算是前人 <del>瓦🖖肯</del> 后人 <del>植树</del> 擦屁股。
    到底干了些什么呢？ 专业剧透 🐶 30年提示您请看 url 👆️ 并点这里 👉 ㊙
    </p>
    ]]></description>
  </item>
  <item>
    <title>A Compact React Cookbook</title>
    <link>http://blog.oyanglul.us/javascript/react-cookbook-mini.html</link>
    <author>root@1eb61f6030c8 (Jichao Ouyang)</author>
    <guid isPermaLink="false">http://blog.oyanglul.us/javascript/react-cookbook-mini.html</guid>
    <pubDate>Sun, 08 Nov 2015 00:00:00 +0000</pubDate>

    <description><![CDATA[<p>
    <i>Nov 08, 2015</i>
    </p>

    <p>
    这是一本非常 campact 的 React 煮书，收集了在实践 React 时的一些问题和解决方法。
    </p>
    <div id="outline-container-orgheadline25" class="outline-3">
    <h3 id="orgheadline25"><a id="ID-26abfff5-cc4a-4f41-84a0-30b785e522a4"></a>Why not 2 way binding/为毛不用双向绑定</h3>
    <div class="outline-text-3" id="text-orgheadline25">
    <p>
    <a href="http://blog.oyanglul.us/javascript/react-cookbook-mini.html">Read More&#x2026;</a>
    </p>
    <hr  />
    </div>
    </div>
    ]]></description>
  </item>

  <item>
    <title>使用 dotfiles 和 stow 管理你的 dotfiles</title>
    <link>http://blog.oyanglul.us/github/using-dotfiles-and-stow-to-manage-your-dotfiles.html</link>
    <author>root@1eb61f6030c8 (Jichao Ouyang)</author>
    <guid isPermaLink="false">http://blog.oyanglul.us/github/using-dotfiles-and-stow-to-manage-your-dotfiles.html</guid>
    <pubDate>Thu, 29 Oct 2015 00:00:00 +0000</pubDate>

    <description><![CDATA[<p>
    <i>Oct 29, 2015</i>
    </p>

    <p>
    curl "<a href="https://raw.githubusercontent.com/jcouyang/dotfiles/master/README.org">https://raw.githubusercontent.com/jcouyang/dotfiles/master/README.org</a>"
    可能看标题你觉得我疯了，什么叫用 dotfiles 管理你的 dotfiles。
    第一个单词 ㊙ 指将 HOME 目录下的 <code>.XXX</code> (它们是真的字面意思dotfiles) 文件同步到 Github 上的方式。
    通常情况下，我们在开发过程中装的大部分工具，都会在 HOME 目录下创建一个以 <code>.</code> 开头的文件或目录，放置配置或者状态。
    因此我们希望的是用 github 版本管理这些 <b>配置</b> ，而不是 <b>状态</b> 。
    </p>


    <p>
    <a href="http://blog.oyanglul.us/github/using-dotfiles-and-stow-to-manage-your-dotfiles.html">Read More...</a>
    </p>
    <hr  />
    ]]></description>
  </item>

  <item>
    <title>Monadic Reactive Programming in JavaScript</title>
    <link>http://blog.oyanglul.us/javascript/reactive-programming.html</link>
    <author>root@1eb61f6030c8 (Jichao Ouyang)</author>
    <guid isPermaLink="false">http://blog.oyanglul.us/javascript/reactive-programming.html</guid>
    <pubDate>Tue, 29 Sep 2015 00:00:00 +0000</pubDate>

    <description><![CDATA[<p>
    <i>Sep 29, 2015</i>
    </p>

    <p>
    当我们都用习惯 Promise Monad 之后，我再来介绍一个跟时间相关的 Stream Monad，通过 Stream Monad，我们可以完成 Promise 或者是数组的奇淫巧计，而且符合所有 monad 的公理，于是我们叫它 Monadic Reactive Programming。
    ㊙
    </p>
    <div id="outline-container-orgheadline28" class="outline-4">
    <h4 id="orgheadline28"><a id="ID-9353a3c8-dbd3-46c1-9d81-271c975f7d9a"></a>Stream</h4>
    <div class="outline-text-4" id="text-orgheadline28">
    <p>
    如果说数组是空间维度，那么 Stream 则是时间维度版本的数组。比如我们有一个数组，需要 reduce 一下再打印出结果，是非常容易做到的：
    ㊙.reduce((acc,x)=&gt;acc+x)
    </p>


    <p>
    <a href="http://blog.oyanglul.us/javascript/reactive-programming.html">Read More&#x2026;</a>
    </p>
    <hr  />
    </div>
    </div>
    ]]></description>
  </item>

  <item>
    <title>入语言第二试: readtable 与 core.async</title>
    <link>http://blog.oyanglul.us/javascript/ru-lang-second-attampt.html</link>
    <author>root@1eb61f6030c8 (Jichao Ouyang)</author>
    <guid isPermaLink="false">http://blog.oyanglul.us/javascript/ru-lang-second-attampt.html</guid>
    <pubDate>Sun, 16 Aug 2015 00:00:00 +0000</pubDate>

    <description><![CDATA[<p>
    <i>Aug 16, 2015</i>
    </p>

    <p>
    俺的小公举淼淼最近各种 <del>发肚子拉烧</del> 发烧拉肚子，难得抽点时间给入语言ru-lang加入俩个大大的 features，忍不住要 marketing 一下。
    ㊙
    紧接㊙，在简单的介绍我是如何移植 clojure 的一些 macro 到 JavaScript 之后，我要介绍两个革命性的移植
    </p>
    <ul class="org-ul">
    <li>readtable</li>
    <li>core.async</li>
    </ul>


    <p>
    <a href="http://blog.oyanglul.us/javascript/ru-lang-second-attampt.html">Read More...</a>
    </p>
    <hr  />
    ]]></description>
  </item>

  <item>
    <title>理解JavaScript的原型链和继承</title>
    <link>http://blog.oyanglul.us/javascript/understand-prototype.html</link>
    <author>root@1eb61f6030c8 (Jichao Ouyang)</author>
    <guid isPermaLink="false">http://blog.oyanglul.us/javascript/understand-prototype.html</guid>
    <pubDate>Fri, 03 Jul 2015 00:00:00 +0000</pubDate>

    <description><![CDATA[<p>
    <i>Jul 03, 2015</i>
    </p>

    <div id="outline-container-orgheadline31" class="outline-3">
    <h3 id="orgheadline31"><a id="ID-4b0f9427-b8a3-4eda-957e-04065aa40328"></a>instanceof 引发的问题</h3>
    <div class="outline-text-3" id="text-orgheadline31">
    <p>
    instanceof 运算符可以用来判断某个构造函数的prototype属性是否存在另外一个要检测对象的原型链上㊙。
    什么意思呢？
    来个题
    Function instanceof Object;
    </p>


    <p>
    <a href="http://blog.oyanglul.us/javascript/understand-prototype.html">Read More&#x2026;</a>
    </p>
    <hr  />
    </div>
    </div>
    ]]></description>
  </item>

  <item>
    <title>自制语言初试 - 入lang</title>
    <link>http://blog.oyanglul.us/javascript/clojure-essence-in-javascript-macro-2.html</link>
    <author>root@1eb61f6030c8 (Jichao Ouyang)</author>
    <guid isPermaLink="false">http://blog.oyanglul.us/javascript/clojure-essence-in-javascript-macro-2.html</guid>
    <pubDate>Mon, 22 Jun 2015 00:00:00 +0000</pubDate>

    <description><![CDATA[<p>
    <i>Jun 22, 2015</i>
    </p>

    <div id="outline-container-orgheadline34" class="outline-3">
    <h3 id="orgheadline34"><a id="ID-b3b1ce7a-1b4a-41b7-aecc-e12c2f589a17"></a>Rationale(为毛要整一门语言)</h3>
    <div class="outline-text-3" id="text-orgheadline34">
    <p>
    ㊙
    </p>
    </div>
    <div id="outline-container-orgheadline33" class="outline-4">
    <h4 id="orgheadline33"><a id="ID-79e6a4a5-f5dd-4648-a681-c38cd0157843"></a>ClojureScript怎么就不好了</h4>
    <div class="outline-text-4" id="text-orgheadline33">
    <p>
    接上篇简单的介绍sweet.js之后, 萌发了特别crazy的idea. 如果CoffeeScript或者LiveScript也算
    语言的话, 其实单单用sweet.js自制一堆macro就能实现类似的语言. 当然, 这两门语言都比较奇特, 一个
    </p>


    <p>
    <a href="http://blog.oyanglul.us/javascript/clojure-essence-in-javascript-macro-2.html">Read More&#x2026;</a>
    </p>
    <hr  />
    </div>
    </div>
    </div>
    ]]></description>
  </item>

  <item>
    <title>JavaScript玩转Clojure大法之 - Macro (1)</title>
    <link>http://blog.oyanglul.us/javascript/clojure-essence-in-javascript-macro.html</link>
    <author>root@1eb61f6030c8 (Jichao Ouyang)</author>
    <guid isPermaLink="false">http://blog.oyanglul.us/javascript/clojure-essence-in-javascript-macro.html</guid>
    <pubDate>Sun, 14 Jun 2015 00:00:00 +0000</pubDate>

    <description><![CDATA[<p>
    <i>Jun 14, 2015</i>
  </p>

  <ul class="org-ul">
    <li>㊙</li>
    <li>㊙</li>
    <li>㊙</li>
    <li><b>JavaScript玩转Clojure大法之 - Macro (1)</b></li>
  </ul>
  <p>
    macro可以说是lisp语言的独门绝技, lisp语言数据即代码,以及s-expression的特点使得可以轻松自定义macro.
  </p>


  <p>
    <a href="http://blog.oyanglul.us/javascript/clojure-essence-in-javascript-macro.html">Read More...</a>
  </p>
  <hr  />
    ]]></description>
  </item>

  <item>
    <title>JavaScript玩转Clojure大法之 - Trampoline</title>
    <link>http://blog.oyanglul.us/javascript/clojure-essence-in-javascript-trampoline.html</link>
    <author>root@1eb61f6030c8 (Jichao Ouyang)</author>
    <guid isPermaLink="false">http://blog.oyanglul.us/javascript/clojure-essence-in-javascript-trampoline.html</guid>
    <pubDate>Sat, 30 May 2015 00:00:00 +0000</pubDate>

    <description><![CDATA[<p>
    <i>May 30, 2015</i>
    </p>

    <ul class="org-ul">
    <li>㊙</li>
    <li>㊙</li>
    <li><b>㊙</b></li>
    <li>㊙</li>
    </ul>
    <p>
    在函数式编程中, 递归可以说是最关健甚至唯一的循环手段
    </p>


    <p>
    <a href="http://blog.oyanglul.us/javascript/clojure-essence-in-javascript-trampoline.html">Read More...</a>
    </p>
    <hr  />
    ]]></description>
  </item>

  <item>
    <title>JavaScript玩转Clojure大法之Transducer</title>
    <link>http://blog.oyanglul.us/javascript/clojure-essence-in-javascript-transducer.html</link>
    <author>root@1eb61f6030c8 (Jichao Ouyang)</author>
    <guid isPermaLink="false">http://blog.oyanglul.us/javascript/clojure-essence-in-javascript-transducer.html</guid>
    <pubDate>Sat, 16 May 2015 00:00:00 +0000</pubDate>

    <description><![CDATA[<p>
    <i>May 16, 2015</i>
    </p>

    <ul class="org-ul">
    <li>㊙</li>
    <li><b>㊙</b></li>
    <li>㊙</li>
    <li>㊙</li>
    </ul>
    <p>
    通过上一篇㊙介绍了如何用JavaScript享受到Clojure在并发编程的优势. 我决定
    </p>


    <p>
    <a href="http://blog.oyanglul.us/javascript/clojure-essence-in-javascript-transducer.html">Read More...</a>
    </p>
    <hr  />
    ]]></description>
  </item>

  <item>
    <title>Functional JavaScript Mini Book</title>
    <link>http://blog.oyanglul.us/javascript/functional-javascript.html</link>
    <author>root@1eb61f6030c8 (Jichao Ouyang)</author>
    <guid isPermaLink="false">http://blog.oyanglul.us/javascript/functional-javascript.html</guid>
    <pubDate>Wed, 13 May 2015 00:00:00 +0000</pubDate>

    <description><![CDATA[<p>
    <i>May 13, 2015</i>
    </p>

    <p>
    ⚠ DEPRETICATED ⚠
    本书已 <del>过时</del> 停更，请转到新书 
    👉 ㊙ 👈
    当然，你依然可以请㊙ ☕
    ㊙
    </p>


    <p>
    <a href="http://blog.oyanglul.us/javascript/functional-javascript.html">Read More...</a>
    </p>
    <hr  />
    ]]></description>
  </item>

  <item>
    <title>Literal Programming Emacs Configure</title>
    <link>http://blog.oyanglul.us/emacs/literal-programming-emacs-config.html</link>
    <author>root@1eb61f6030c8 (Jichao Ouyang)</author>
    <guid isPermaLink="false">http://blog.oyanglul.us/emacs/literal-programming-emacs-config.html</guid>
    <pubDate>Fri, 08 May 2015 00:00:00 +0000</pubDate>

    <description><![CDATA[<p>
    <i>May 08, 2015</i>
    </p>



    <p>
    <a href="http://blog.oyanglul.us/emacs/literal-programming-emacs-config.html">Read More...</a>
    </p>
    <hr  />
    ]]></description>
  </item>

  <item>
    <title>Clojure 风格的 JavaScript 并发编程</title>
    <link>http://blog.oyanglul.us/javascript/clojure-core.async-essence-in-native-javascript.html</link>
    <author>root@1eb61f6030c8 (Jichao Ouyang)</author>
    <guid isPermaLink="false">http://blog.oyanglul.us/javascript/clojure-core.async-essence-in-native-javascript.html</guid>
    <pubDate>Tue, 28 Apr 2015 00:00:00 +0000</pubDate>

    <description><![CDATA[<p>
    <i>Apr 28, 2015</i>
    </p>

    <ul class="org-ul">
    <li><b>㊙</b></li>
    <li>㊙</li>
    <li>㊙</li>
    <li>㊙</li>
    </ul>
    <p>
    在看到第一行JavaScript代码之前，我要啰嗦一下为什么要用 clojure core.async 的异步风格。
    </p>


    <p>
    <a href="http://blog.oyanglul.us/javascript/clojure-core.async-essence-in-native-javascript.html">Read More...</a>
    </p>
    <hr  />
    ]]></description>
  </item>

  <item>
    <title>Essential EcmaScript 6</title>
    <link>http://blog.oyanglul.us/javascript/essential-ecmascript6.html</link>
    <author>root@1eb61f6030c8 (Jichao Ouyang)</author>
    <guid isPermaLink="false">http://blog.oyanglul.us/javascript/essential-ecmascript6.html</guid>
    <pubDate>Fri, 20 Mar 2015 00:00:00 +0000</pubDate>

    <description><![CDATA[<p>
    <i>Mar 20, 2015</i>
    </p>

    <p>
    新的草案㊙
    (虽然说是草案,但你可以看到 Firefox 其实已经实现大部分的
    feature)离我们越来越近了, 而且我们已经可以通过 ㊙ 在项目中使用这些新的features. 是时候让我们
    重新认识一下 JavaScript 了. 下面列出了一部分比较让人兴奋和期待的features. 剧透一下我最激动的还是㊙
    </p>
    <div id="outline-container-orgheadline42" class="outline-3">
    <h3 id="orgheadline42"><a id="ID-c8612c46-7e28-4696-ad77-24f22dfc89c7"></a>Arrow Function</h3>
    <div class="outline-text-3" id="text-orgheadline42">
    <p>
    <a href="http://blog.oyanglul.us/javascript/essential-ecmascript6.html">Read More&#x2026;</a>
    </p>
    <hr  />
    </div>
    </div>
    ]]></description>
  </item>

  <item>
    <title>Clojure The Mini Book</title>
    <link>http://blog.oyanglul.us/clojure/clojure-the-mini-book.html</link>
    <author>root@1eb61f6030c8 (Jichao Ouyang)</author>
    <guid isPermaLink="false">http://blog.oyanglul.us/clojure/clojure-the-mini-book.html</guid>
    <pubDate>Thu, 26 Feb 2015 00:00:00 +0000</pubDate>

    <description><![CDATA[<p>
    <i>Feb 26, 2015</i>
    </p>

    <p>
    ;; please using cider version of ob-clojure 
    (require 'ob-clojure)
    (require 'ob-js)
    (setq org-babel-clojure-backend 'cider)
    </p>
    <pre class="example">
    cider
    </pre>


    <p>
    <a href="http://blog.oyanglul.us/clojure/clojure-the-mini-book.html">Read More...</a>
    </p>
    <hr  />
    ]]></description>
  </item>

  <item>
    <title>make Bamboo support Github Pull Request with Status API</title>
    <link>http://blog.oyanglul.us/make Bamboo support Github Pull Request with Status API.html</link>
    <author>root@1eb61f6030c8 (Jichao Ouyang)</author>
    <guid isPermaLink="false">http://blog.oyanglul.us/make Bamboo support Github Pull Request with Status API.html</guid>
    <pubDate>Wed, 18 Feb 2015 00:00:00 +0000</pubDate>

    <description><![CDATA[<p>
    <i>Feb 18, 2015</i>
    </p>

    <div id="outline-container-orgheadline45" class="outline-3">
    <h3 id="orgheadline45"><a id="ID-cf00f2fb-77d2-4057-b871-46a48e8a74fd"></a>what's wrong with Bamboo</h3>
    <div class="outline-text-3" id="text-orgheadline45">
    <p>
    if you used <i>travis-ci</i> on github, you may familiar with this thing when sending pull request
    ㊙
    those green things came from github status api.
    but <i>bamboo</i> does not come with native support for github status api
    </p>


    <p>
    <a href="http://blog.oyanglul.us/make Bamboo support Github Pull Request with Status API.html">Read More&#x2026;</a>
    </p>
    <hr  />
    </div>
    </div>
    ]]></description>
  </item>

  <item>
    <title>About Me</title>
    <link>http://blog.oyanglul.us/jichao.ouyang.html</link>
    <author>root@1eb61f6030c8 (Jichao Ouyang)</author>
    <guid isPermaLink="false">http://blog.oyanglul.us/jichao.ouyang.html</guid>
    <pubDate>Sat, 01 Feb 1986 00:00:00 +0000</pubDate>

    <description><![CDATA[<p>
    <i>Feb 01, 1986</i>
    </p>

    <p>
    不会 Haskell 的 Scala 程序员写不出好的 JavaScript
    Hi, I'm programmer who program <code>JavaScript</code>, <code>Ruby</code>, sometime even <code>Scala</code> for living, meanwhile also play <code>Clojure/Script</code>, <code>Haskell</code> and my own language <code>rù</code> for <b>fun</b>.
    If you want to find/ping me, I'm always available on
    </p>
    <div id="outline-container-orgheadline47" class="outline-3">
    <h3 id="orgheadline47"><a id="ID-2642da93-bcea-48a1-aba1-ce45aa1cf693"></a>Projects</h3>
    <div class="outline-text-3" id="text-orgheadline47">
    </div>
    </div>
    <div id="outline-container-orgheadline48" class="outline-3">
    <h3 id="orgheadline48"><a id="ID-262ee6b4-c3c1-4c73-a0e3-32a6680e85b0"></a>Books</h3>
    <div class="outline-text-3" id="text-orgheadline48">
    <p>
    <a href="http://blog.oyanglul.us/jichao.ouyang.html">Read More&#x2026;</a>
    </p>
    <hr  />
    </div>
    </div>
    ]]></description>
  </item>
</channel>
</rss>
